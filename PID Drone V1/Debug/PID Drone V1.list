
PID Drone V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006904  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08006a18  08006a18  00016a18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c20  08006c20  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006c20  08006c20  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c20  08006c20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000074  08006c9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08006c9c  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010286  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002139  00000000  00000000  00030323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00032460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180db  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e6c  00000000  00000000  0004c31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d652  00000000  00000000  0005d187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea7d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  000ea82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080069fc 	.word	0x080069fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080069fc 	.word	0x080069fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <MPU6050_Init>:
//static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8000fdc:	2254      	movs	r2, #84	; 0x54
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <MPU6050_Init+0x1c>)
 8000fe2:	f004 f9fd 	bl	80053e0 <memcpy>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000090 	.word	0x20000090

08000ff4 <I2C_Write8>:
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
}

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 800100c:	23d0      	movs	r3, #208	; 0xd0
 800100e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	b299      	uxth	r1, r3
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <I2C_Write8+0x38>)
 8001020:	f001 fe50 	bl	8002cc4 <HAL_I2C_Master_Transmit>
}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000090 	.word	0x20000090

08001030 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	206b      	movs	r0, #107	; 0x6b
 8001040:	f7ff ffd8 	bl	8000ff4 <I2C_Write8>
	HAL_Delay(100);
 8001044:	2064      	movs	r0, #100	; 0x64
 8001046:	f001 f9d9 	bl	80023fc <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	791b      	ldrb	r3, [r3, #4]
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	b25b      	sxtb	r3, r3
 800105c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001060:	b25a      	sxtb	r2, r3
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4313      	orrs	r3, r2
 8001068:	b25b      	sxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4619      	mov	r1, r3
 8001070:	206b      	movs	r0, #107	; 0x6b
 8001072:	f7ff ffbf 	bl	8000ff4 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001076:	2064      	movs	r0, #100	; 0x64
 8001078:	f001 f9c0 	bl	80023fc <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	78db      	ldrb	r3, [r3, #3]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	4619      	mov	r1, r3
 800108e:	201a      	movs	r0, #26
 8001090:	f7ff ffb0 	bl	8000ff4 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0318 	and.w	r3, r3, #24
 80010a4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4619      	mov	r1, r3
 80010aa:	201b      	movs	r0, #27
 80010ac:	f7ff ffa2 	bl	8000ff4 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0318 	and.w	r3, r3, #24
 80010c0:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4619      	mov	r1, r3
 80010c6:	201c      	movs	r0, #28
 80010c8:	f7ff ff94 	bl	8000ff4 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 80010cc:	2004      	movs	r0, #4
 80010ce:	f000 f857 	bl	8001180 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	789b      	ldrb	r3, [r3, #2]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d81a      	bhi.n	8001110 <MPU6050_Config+0xe0>
 80010da:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <MPU6050_Config+0xb0>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	080010f9 	.word	0x080010f9
 80010e8:	08001101 	.word	0x08001101
 80010ec:	08001109 	.word	0x08001109
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MPU6050_Config+0x12c>)
 80010f2:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <MPU6050_Config+0x130>)
 80010f4:	601a      	str	r2, [r3, #0]
			break;
 80010f6:	e00c      	b.n	8001112 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MPU6050_Config+0x12c>)
 80010fa:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <MPU6050_Config+0x134>)
 80010fc:	601a      	str	r2, [r3, #0]
				break;
 80010fe:	e008      	b.n	8001112 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MPU6050_Config+0x12c>)
 8001102:	4a19      	ldr	r2, [pc, #100]	; (8001168 <MPU6050_Config+0x138>)
 8001104:	601a      	str	r2, [r3, #0]
			break;
 8001106:	e004      	b.n	8001112 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MPU6050_Config+0x12c>)
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <MPU6050_Config+0x13c>)
 800110c:	601a      	str	r2, [r3, #0]
			break;
 800110e:	e000      	b.n	8001112 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001110:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d81a      	bhi.n	8001150 <MPU6050_Config+0x120>
 800111a:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <MPU6050_Config+0xf0>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	08001131 	.word	0x08001131
 8001124:	08001139 	.word	0x08001139
 8001128:	08001141 	.word	0x08001141
 800112c:	08001149 	.word	0x08001149
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MPU6050_Config+0x140>)
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <MPU6050_Config+0x144>)
 8001134:	601a      	str	r2, [r3, #0]
			break;
 8001136:	e00c      	b.n	8001152 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MPU6050_Config+0x140>)
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <MPU6050_Config+0x148>)
 800113c:	601a      	str	r2, [r3, #0]
				break;
 800113e:	e008      	b.n	8001152 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MPU6050_Config+0x140>)
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <MPU6050_Config+0x14c>)
 8001144:	601a      	str	r2, [r3, #0]
			break;
 8001146:	e004      	b.n	8001152 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MPU6050_Config+0x140>)
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <MPU6050_Config+0x130>)
 800114c:	601a      	str	r2, [r3, #0]
			break;
 800114e:	e000      	b.n	8001152 <MPU6050_Config+0x122>
		
		default:
			break;
 8001150:	bf00      	nop
	}
	
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000e4 	.word	0x200000e4
 8001160:	3d7a0000 	.word	0x3d7a0000
 8001164:	3dfa0000 	.word	0x3dfa0000
 8001168:	3e7a0000 	.word	0x3e7a0000
 800116c:	3efa0000 	.word	0x3efa0000
 8001170:	200000e8 	.word	0x200000e8
 8001174:	3bfa0000 	.word	0x3bfa0000
 8001178:	3c7a0000 	.word	0x3c7a0000
 800117c:	3cfa0000 	.word	0x3cfa0000

08001180 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4619      	mov	r1, r3
 800118e:	2019      	movs	r0, #25
 8001190:	f7ff ff30 	bl	8000ff4 <I2C_Write8>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	6078      	str	r0, [r7, #4]

	uint8_t Accel_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&i2cHandler, MPU_ADDR<<1, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2306      	movs	r3, #6
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	223b      	movs	r2, #59	; 0x3b
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	4812      	ldr	r0, [pc, #72]	; (8001204 <MPU6050_Get_Accel_RawData+0x68>)
 80011bc:	f001 fe80 	bl	8002ec0 <HAL_I2C_Mem_Read>

	rawDef -> x = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 80011c0:	7a3b      	ldrb	r3, [r7, #8]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7a7b      	ldrb	r3, [r7, #9]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
	rawDef -> y = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 80011d4:	7abb      	ldrb	r3, [r7, #10]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	7afb      	ldrb	r3, [r7, #11]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
	rawDef -> z = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 80011e8:	7b3b      	ldrb	r3, [r7, #12]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	609a      	str	r2, [r3, #8]


}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000090 	.word	0x20000090

08001208 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af04      	add	r7, sp, #16
 800120e:	6078      	str	r0, [r7, #4]
	
	uint8_t Gyro_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&i2cHandler, MPU_ADDR<<1, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2306      	movs	r3, #6
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2243      	movs	r2, #67	; 0x43
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <MPU6050_Get_Gyro_RawData+0x68>)
 8001228:	f001 fe4a 	bl	8002ec0 <HAL_I2C_Mem_Read>

	rawDef -> x = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 800122c:	7a3b      	ldrb	r3, [r7, #8]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	7a7b      	ldrb	r3, [r7, #9]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	601a      	str	r2, [r3, #0]
	rawDef -> y = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	605a      	str	r2, [r3, #4]
	rawDef -> z = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 8001254:	7b3b      	ldrb	r3, [r7, #12]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	609a      	str	r2, [r3, #8]

	
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000090 	.word	0x20000090

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f001 f85d 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f843 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001282:	f000 fa83 	bl	800178c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001286:	f000 f899 	bl	80013bc <MX_I2C1_Init>
  MX_TIM1_Init();
 800128a:	f000 f8c5 	bl	8001418 <MX_TIM1_Init>
  MX_TIM2_Init();
 800128e:	f000 f913 	bl	80014b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001292:	f000 f95d 	bl	8001550 <MX_TIM3_Init>
  MX_USB_PCD_Init();
 8001296:	f000 fa57 	bl	8001748 <MX_USB_PCD_Init>
  MX_TIM4_Init();
 800129a:	f000 f9f1 	bl	8001680 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&hi2c1);
 800129e:	4816      	ldr	r0, [pc, #88]	; (80012f8 <main+0x84>)
 80012a0:	f7ff fe98 	bl	8000fd4 <MPU6050_Init>
  myMpuConfig.Accel_Full_Scale = AFS_SEL_8g;
 80012a4:	2302      	movs	r3, #2
 80012a6:	71bb      	strb	r3, [r7, #6]
  myMpuConfig.ClockSource = Internal_8MHz;
 80012a8:	2300      	movs	r3, #0
 80012aa:	713b      	strb	r3, [r7, #4]
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80012ac:	2301      	movs	r3, #1
 80012ae:	71fb      	strb	r3, [r7, #7]
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80012b0:	2301      	movs	r3, #1
 80012b2:	717b      	strb	r3, [r7, #5]
  myMpuConfig.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 80012b4:	2300      	movs	r3, #0
 80012b6:	723b      	strb	r3, [r7, #8]
  MPU6050_Config(&myMpuConfig);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff feb8 	bl	8001030 <MPU6050_Config>

  // Blinking LED to inform when IMU sensor init done, then go to calibration state
  for(int i = 0; i<10; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e00a      	b.n	80012dc <main+0x68>
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <main+0x88>)
 80012cc:	f001 fb7b 	bl	80029c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80012d0:	20c8      	movs	r0, #200	; 0xc8
 80012d2:	f001 f893 	bl	80023fc <HAL_Delay>
  for(int i = 0; i<10; i++)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b09      	cmp	r3, #9
 80012e0:	ddf1      	ble.n	80012c6 <main+0x52>
  }

  HAL_Delay(3000);
 80012e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012e6:	f001 f889 	bl	80023fc <HAL_Delay>


  HAL_TIM_Base_Start_IT(&htim2);
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <main+0x8c>)
 80012ec:	f003 f9ae 	bl	800464c <HAL_TIM_Base_Start_IT>
  IsSensorReady = true;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <main+0x90>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <main+0x82>
 80012f8:	200000ec 	.word	0x200000ec
 80012fc:	40011000 	.word	0x40011000
 8001300:	20000188 	.word	0x20000188
 8001304:	20000585 	.word	0x20000585

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b094      	sub	sp, #80	; 0x50
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f004 f870 	bl	80053fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001338:	2301      	movs	r3, #1
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	2302      	movs	r3, #2
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001354:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fc68 	bl	8003c34 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800136a:	f000 fd85 	bl	8001e78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fed4 	bl	8004138 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001396:	f000 fd6f 	bl	8001e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800139a:	2310      	movs	r3, #16
 800139c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 f84b 	bl	8004440 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013b0:	f000 fd62 	bl	8001e78 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3750      	adds	r7, #80	; 0x50
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_I2C1_Init+0x50>)
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <MX_I2C1_Init+0x54>)
 80013c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_I2C1_Init+0x50>)
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <MX_I2C1_Init+0x58>)
 80013ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_I2C1_Init+0x50>)
 80013da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_I2C1_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_I2C1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_I2C1_Init+0x50>)
 80013fa:	f001 fb1f 	bl	8002a3c <HAL_I2C_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001404:	f000 fd38 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000ec 	.word	0x200000ec
 8001410:	40005400 	.word	0x40005400
 8001414:	000186a0 	.word	0x000186a0

08001418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM1_Init+0x98>)
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <MX_TIM1_Init+0x9c>)
 8001438:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800143a:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM1_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_TIM1_Init+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM1_Init+0x98>)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_TIM1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_TIM1_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM1_Init+0x98>)
 8001462:	f003 f8a3 	bl	80045ac <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800146c:	f000 fd04 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_TIM1_Init+0x98>)
 800147e:	f003 fb4d 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001488:	f000 fcf6 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_TIM1_Init+0x98>)
 800149a:	f003 fea7 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014a4:	f000 fce8 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000140 	.word	0x20000140
 80014b4:	40012c00 	.word	0x40012c00

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_TIM2_Init+0x94>)
 80014d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MX_TIM2_Init+0x94>)
 80014de:	2209      	movs	r2, #9
 80014e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_TIM2_Init+0x94>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 28800;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <MX_TIM2_Init+0x94>)
 80014ea:	f44f 42e1 	mov.w	r2, #28800	; 0x7080
 80014ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <MX_TIM2_Init+0x94>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_TIM2_Init+0x94>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fc:	4813      	ldr	r0, [pc, #76]	; (800154c <MX_TIM2_Init+0x94>)
 80014fe:	f003 f855 	bl	80045ac <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001508:	f000 fcb6 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4619      	mov	r1, r3
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM2_Init+0x94>)
 800151a:	f003 faff 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001524:	f000 fca8 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_TIM2_Init+0x94>)
 8001536:	f003 fe59 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001540:	f000 fc9a 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000188 	.word	0x20000188

08001550 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08e      	sub	sp, #56	; 0x38
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <MX_TIM3_Init+0x128>)
 8001582:	4a3e      	ldr	r2, [pc, #248]	; (800167c <MX_TIM3_Init+0x12c>)
 8001584:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <MX_TIM3_Init+0x128>)
 8001588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <MX_TIM3_Init+0x128>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 144;
 8001594:	4b38      	ldr	r3, [pc, #224]	; (8001678 <MX_TIM3_Init+0x128>)
 8001596:	2290      	movs	r2, #144	; 0x90
 8001598:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b37      	ldr	r3, [pc, #220]	; (8001678 <MX_TIM3_Init+0x128>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <MX_TIM3_Init+0x128>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a6:	4834      	ldr	r0, [pc, #208]	; (8001678 <MX_TIM3_Init+0x128>)
 80015a8:	f003 f800 	bl	80045ac <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015b2:	f000 fc61 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c0:	4619      	mov	r1, r3
 80015c2:	482d      	ldr	r0, [pc, #180]	; (8001678 <MX_TIM3_Init+0x128>)
 80015c4:	f003 faaa 	bl	8004b1c <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015ce:	f000 fc53 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015d2:	4829      	ldr	r0, [pc, #164]	; (8001678 <MX_TIM3_Init+0x128>)
 80015d4:	f003 f88c 	bl	80046f0 <HAL_TIM_PWM_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015de:	f000 fc4b 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4619      	mov	r1, r3
 80015f0:	4821      	ldr	r0, [pc, #132]	; (8001678 <MX_TIM3_Init+0x128>)
 80015f2:	f003 fdfb 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015fc:	f000 fc3c 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001600:	2360      	movs	r3, #96	; 0x60
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <MX_TIM3_Init+0x128>)
 8001618:	f003 f9c2 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001622:	f000 fc29 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	2204      	movs	r2, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <MX_TIM3_Init+0x128>)
 800162e:	f003 f9b7 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001638:	f000 fc1e 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2208      	movs	r2, #8
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM3_Init+0x128>)
 8001644:	f003 f9ac 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800164e:	f000 fc13 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	220c      	movs	r2, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM3_Init+0x128>)
 800165a:	f003 f9a1 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001664:	f000 fc08 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM3_Init+0x128>)
 800166a:	f000 fcf5 	bl	8002058 <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3738      	adds	r7, #56	; 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200001d0 	.word	0x200001d0
 800167c:	40000400 	.word	0x40000400

08001680 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <MX_TIM4_Init+0xc4>)
 80016a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 144;
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016b8:	2290      	movs	r2, #144	; 0x90
 80016ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016c8:	481d      	ldr	r0, [pc, #116]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016ca:	f003 f811 	bl	80046f0 <HAL_TIM_PWM_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80016d4:	f000 fbd0 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4619      	mov	r1, r3
 80016e6:	4816      	ldr	r0, [pc, #88]	; (8001740 <MX_TIM4_Init+0xc0>)
 80016e8:	f003 fd80 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80016f2:	f000 fbc1 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f6:	2360      	movs	r3, #96	; 0x60
 80016f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2208      	movs	r2, #8
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM4_Init+0xc0>)
 800170e:	f003 f947 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001718:	f000 fbae 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	220c      	movs	r2, #12
 8001720:	4619      	mov	r1, r3
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM4_Init+0xc0>)
 8001724:	f003 f93c 	bl	80049a0 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800172e:	f000 fba3 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM4_Init+0xc0>)
 8001734:	f000 fc90 	bl	8002058 <HAL_TIM_MspPostInit>

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000218 	.word	0x20000218
 8001744:	40000800 	.word	0x40000800

08001748 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <MX_USB_PCD_Init+0x40>)
 8001750:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 8001754:	2208      	movs	r2, #8
 8001756:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 800175a:	2202      	movs	r2, #2
 800175c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_USB_PCD_Init+0x3c>)
 8001772:	f002 f953 	bl	8003a1c <HAL_PCD_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800177c:	f000 fb7c 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000260 	.word	0x20000260
 8001788:	40005c00 	.word	0x40005c00

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b8:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017be:	f043 0320 	orr.w	r3, r3, #32
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <MX_GPIO_Init+0x148>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001806:	4834      	ldr	r0, [pc, #208]	; (80018d8 <MX_GPIO_Init+0x14c>)
 8001808:	f001 f8c5 	bl	8002996 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2302      	movs	r3, #2
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 0310 	add.w	r3, r7, #16
 8001822:	4619      	mov	r1, r3
 8001824:	482c      	ldr	r0, [pc, #176]	; (80018d8 <MX_GPIO_Init+0x14c>)
 8001826:	f000 ff1b 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800182a:	233f      	movs	r3, #63	; 0x3f
 800182c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <MX_GPIO_Init+0x150>)
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	4828      	ldr	r0, [pc, #160]	; (80018e0 <MX_GPIO_Init+0x154>)
 800183e:	f000 ff0f 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001842:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001846:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <MX_GPIO_Init+0x150>)
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	4823      	ldr	r0, [pc, #140]	; (80018e4 <MX_GPIO_Init+0x158>)
 8001858:	f000 ff02 	bl	8002660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2006      	movs	r0, #6
 8001862:	f000 fec6 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001866:	2006      	movs	r0, #6
 8001868:	f000 fedf 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2007      	movs	r0, #7
 8001872:	f000 febe 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001876:	2007      	movs	r0, #7
 8001878:	f000 fed7 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	2008      	movs	r0, #8
 8001882:	f000 feb6 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001886:	2008      	movs	r0, #8
 8001888:	f000 fecf 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2009      	movs	r0, #9
 8001892:	f000 feae 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001896:	2009      	movs	r0, #9
 8001898:	f000 fec7 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	200a      	movs	r0, #10
 80018a2:	f000 fea6 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018a6:	200a      	movs	r0, #10
 80018a8:	f000 febf 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2017      	movs	r0, #23
 80018b2:	f000 fe9e 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018b6:	2017      	movs	r0, #23
 80018b8:	f000 feb7 	bl	800262a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2028      	movs	r0, #40	; 0x28
 80018c2:	f000 fe96 	bl	80025f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c6:	2028      	movs	r0, #40	; 0x28
 80018c8:	f000 feaf 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40011000 	.word	0x40011000
 80018dc:	10110000 	.word	0x10110000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80018e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]

	 // Timer 2 using for read IMU sensor at 250Hz (every 4ms)
	 if(htim->Instance==TIM2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fa:	f040 828a 	bne.w	8001e12 <HAL_TIM_PeriodElapsedCallback+0x52a>
	 {
		 // Start to calibration the sensor, DO NOT make vibration !!
		 //MPU6050_Get_Accel_RawData(&myAccelRaw);
		 //MPU6050_Get_Gyro_RawData(&myGyroRaw);
		 if(IsCalibSensor && IsSensorReady)
 80018fe:	4bb2      	ldr	r3, [pc, #712]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d058      	beq.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001906:	4bb1      	ldr	r3, [pc, #708]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d054      	beq.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		 {
		 	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 800190e:	48b0      	ldr	r0, [pc, #704]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001910:	f7ff fc7a 	bl	8001208 <MPU6050_Get_Gyro_RawData>
		 	gyro_x_cal += myGyroRaw.x;
 8001914:	4bae      	ldr	r3, [pc, #696]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4bae      	ldr	r3, [pc, #696]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4413      	add	r3, r2
 800191e:	4aad      	ldr	r2, [pc, #692]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001920:	6013      	str	r3, [r2, #0]
			gyro_y_cal += myGyroRaw.y;
 8001922:	4bab      	ldr	r3, [pc, #684]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4bac      	ldr	r3, [pc, #688]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4aaa      	ldr	r2, [pc, #680]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800192e:	6013      	str	r3, [r2, #0]
			gyro_z_cal += myGyroRaw.z;
 8001930:	4ba7      	ldr	r3, [pc, #668]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4ba9      	ldr	r3, [pc, #676]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4aa8      	ldr	r2, [pc, #672]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800193c:	6013      	str	r3, [r2, #0]
			calibCount ++;
 800193e:	4ba8      	ldr	r3, [pc, #672]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	b29b      	uxth	r3, r3
 8001946:	3301      	adds	r3, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	b21a      	sxth	r2, r3
 800194c:	4ba4      	ldr	r3, [pc, #656]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800194e:	801a      	strh	r2, [r3, #0]
			if(calibCount >= 2000)
 8001950:	4ba3      	ldr	r3, [pc, #652]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800195a:	db23      	blt.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			{
				gyro_x_cal /= 2000;
 800195c:	4b9d      	ldr	r3, [pc, #628]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4aa0      	ldr	r2, [pc, #640]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001962:	fb82 1203 	smull	r1, r2, r2, r3
 8001966:	11d2      	asrs	r2, r2, #7
 8001968:	17db      	asrs	r3, r3, #31
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a99      	ldr	r2, [pc, #612]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800196e:	6013      	str	r3, [r2, #0]
				gyro_y_cal /= 2000;
 8001970:	4b99      	ldr	r3, [pc, #612]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a9b      	ldr	r2, [pc, #620]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001976:	fb82 1203 	smull	r1, r2, r2, r3
 800197a:	11d2      	asrs	r2, r2, #7
 800197c:	17db      	asrs	r3, r3, #31
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	4a95      	ldr	r2, [pc, #596]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001982:	6013      	str	r3, [r2, #0]
				gyro_z_cal /= 2000;
 8001984:	4b95      	ldr	r3, [pc, #596]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a96      	ldr	r2, [pc, #600]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800198a:	fb82 1203 	smull	r1, r2, r2, r3
 800198e:	11d2      	asrs	r2, r2, #7
 8001990:	17db      	asrs	r3, r3, #31
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a91      	ldr	r2, [pc, #580]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001996:	6013      	str	r3, [r2, #0]
				IsCalibSensor = false;
 8001998:	4b8b      	ldr	r3, [pc, #556]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
				IsReadSensor = true;
 800199e:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
			}

			if(!calibCount %20)
 80019a4:	4b8e      	ldr	r3, [pc, #568]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d104      	bne.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	488e      	ldr	r0, [pc, #568]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x304>)
 80019b4:	f001 f807 	bl	80029c6 <HAL_GPIO_TogglePin>
			}
		}

		if(IsReadSensor)
 80019b8:	4b8b      	ldr	r3, [pc, #556]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8228 	beq.w	8001e12 <HAL_TIM_PeriodElapsedCallback+0x52a>
		{
			MPU6050_Get_Accel_RawData(&myAccelRaw);
 80019c2:	488b      	ldr	r0, [pc, #556]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80019c4:	f7ff fbea 	bl	800119c <MPU6050_Get_Accel_RawData>
			MPU6050_Get_Gyro_RawData(&myGyroRaw);
 80019c8:	4881      	ldr	r0, [pc, #516]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80019ca:	f7ff fc1d 	bl	8001208 <MPU6050_Get_Gyro_RawData>

	 		gyro_x = myAccelRaw.x;
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a88      	ldr	r2, [pc, #544]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80019d4:	6013      	str	r3, [r2, #0]
			gyro_y = myAccelRaw.y;
 80019d6:	4b86      	ldr	r3, [pc, #536]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80019dc:	6013      	str	r3, [r2, #0]
			gyro_z = myAccelRaw.z;
 80019de:	4b84      	ldr	r3, [pc, #528]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4a86      	ldr	r2, [pc, #536]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 80019e4:	6013      	str	r3, [r2, #0]

			gyro_x -= gyro_x_cal;
 80019e6:	4b83      	ldr	r3, [pc, #524]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80019f2:	6013      	str	r3, [r2, #0]
			gyro_y -= gyro_y_cal;
 80019f4:	4b80      	ldr	r3, [pc, #512]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4a7e      	ldr	r2, [pc, #504]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001a00:	6013      	str	r3, [r2, #0]
			gyro_z -= gyro_z_cal;
 8001a02:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b75      	ldr	r3, [pc, #468]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	4a7b      	ldr	r2, [pc, #492]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001a0e:	6013      	str	r3, [r2, #0]

			// 0.0000610687 = 1/250*65.5 (250Hz, 65.5 Degree/s)
			angle_pitch += gyro_x * 0.0000610687;
 8001a10:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fcff 	bl	8000418 <__aeabi_f2d>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fce6 	bl	80003f4 <__aeabi_i2d>
 8001a28:	a363      	add	r3, pc, #396	; (adr r3, 8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fd4b 	bl	80004c8 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fb8f 	bl	800015c <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f817 	bl	8000a78 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a6c      	ldr	r2, [pc, #432]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001a4e:	6013      	str	r3, [r2, #0]
			angle_roll += gyro_y* 0.0000610687;
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fcdf 	bl	8000418 <__aeabi_f2d>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fcc6 	bl	80003f4 <__aeabi_i2d>
 8001a68:	a353      	add	r3, pc, #332	; (adr r3, 8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fd2b 	bl	80004c8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fb6f 	bl	800015c <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7fe fff7 	bl	8000a78 <__aeabi_d2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001a8e:	6013      	str	r3, [r2, #0]
			//angle_pitch += myGyroRaw.x * 0.0000610687;
			//angle_roll += myGyroRaw.y * 0.0000610687;


			// 0.000001065849 = 0.0000610687 * (Pi/180)
			angle_pitch += angle_roll * sin(gyro_z * 0.000001065849);
 8001a90:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fcbf 	bl	8000418 <__aeabi_f2d>
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fcb8 	bl	8000418 <__aeabi_f2d>
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	4689      	mov	r9, r1
 8001aac:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fc9f 	bl	80003f4 <__aeabi_i2d>
 8001ab6:	a342      	add	r3, pc, #264	; (adr r3, 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd04 	bl	80004c8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f003 fca0 	bl	800540c <sin>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4640      	mov	r0, r8
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	f7fe fcf8 	bl	80004c8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fb3c 	bl	800015c <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7fe ffc4 	bl	8000a78 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a43      	ldr	r2, [pc, #268]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001af4:	6013      	str	r3, [r2, #0]
			angle_roll -= angle_pitch * sin(gyro_z * 0.000001065849);
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc8c 	bl	8000418 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fc85 	bl	8000418 <__aeabi_f2d>
 8001b0e:	4680      	mov	r8, r0
 8001b10:	4689      	mov	r9, r1
 8001b12:	4b3a      	ldr	r3, [pc, #232]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc6c 	bl	80003f4 <__aeabi_i2d>
 8001b1c:	a328      	add	r3, pc, #160	; (adr r3, 8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fcd1 	bl	80004c8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f003 fc6d 	bl	800540c <sin>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4640      	mov	r0, r8
 8001b38:	4649      	mov	r1, r9
 8001b3a:	f7fe fcc5 	bl	80004c8 <__aeabi_dmul>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f7fe fb07 	bl	8000158 <__aeabi_dsub>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe ff91 	bl	8000a78 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001b5a:	6013      	str	r3, [r2, #0]

			acc_total_vector = sqrt((myAccelRaw.x*myAccelRaw.x)+(myAccelRaw.y*myAccelRaw.y)+(myAccelRaw.z*myAccelRaw.z));
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fb03 f202 	mul.w	r2, r3, r2
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4920      	ldr	r1, [pc, #128]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b6e:	6849      	ldr	r1, [r1, #4]
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	441a      	add	r2, r3
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	491d      	ldr	r1, [pc, #116]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b7c:	6889      	ldr	r1, [r1, #8]
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fc35 	bl	80003f4 <__aeabi_i2d>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f003 fca9 	bl	80054e8 <sqrt>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe ff43 	bl	8000a28 <__aeabi_d2iz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001ba6:	6013      	str	r3, [r2, #0]

			angle_pitch_acc = asin((float)myAccelRaw.y/acc_total_vector) * 57.29577;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f86d 	bl	8000c8c <__aeabi_i2f>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	e02a      	b.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x324>
 8001bb6:	bf00      	nop
 8001bb8:	46f9000a 	.word	0x46f9000a
 8001bbc:	3f100240 	.word	0x3f100240
 8001bc0:	5e73bb40 	.word	0x5e73bb40
 8001bc4:	3eb1e1c9 	.word	0x3eb1e1c9
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000585 	.word	0x20000585
 8001bd0:	20000594 	.word	0x20000594
 8001bd4:	2000054c 	.word	0x2000054c
 8001bd8:	20000550 	.word	0x20000550
 8001bdc:	20000554 	.word	0x20000554
 8001be0:	20000586 	.word	0x20000586
 8001be4:	10624dd3 	.word	0x10624dd3
 8001be8:	20000584 	.word	0x20000584
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	20000588 	.word	0x20000588
 8001bf4:	20000560 	.word	0x20000560
 8001bf8:	20000564 	.word	0x20000564
 8001bfc:	20000568 	.word	0x20000568
 8001c00:	20000558 	.word	0x20000558
 8001c04:	2000055c 	.word	0x2000055c
 8001c08:	2000056c 	.word	0x2000056c
 8001c0c:	4b90      	ldr	r3, [pc, #576]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f83b 	bl	8000c8c <__aeabi_i2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff f93e 	bl	8000e9c <__aeabi_fdiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fbf8 	bl	8000418 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f003 fc32 	bl	8005498 <asin>
 8001c34:	a37a      	add	r3, pc, #488	; (adr r3, 8001e20 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fc45 	bl	80004c8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ff17 	bl	8000a78 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a81      	ldr	r2, [pc, #516]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001c4e:	6013      	str	r3, [r2, #0]
			angle_roll_acc = asin((float)myAccelRaw.x/acc_total_vector) * -57.29577;
 8001c50:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f819 	bl	8000c8c <__aeabi_i2f>
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	4b7c      	ldr	r3, [pc, #496]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f813 	bl	8000c8c <__aeabi_i2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff f916 	bl	8000e9c <__aeabi_fdiv>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fbd0 	bl	8000418 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f003 fc0a 	bl	8005498 <asin>
 8001c84:	a368      	add	r3, pc, #416	; (adr r3, 8001e28 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fc1d 	bl	80004c8 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f7fe feef 	bl	8000a78 <__aeabi_d2f>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a6f      	ldr	r2, [pc, #444]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001c9e:	6013      	str	r3, [r2, #0]

			angle_pitch_acc -= 0.0;
 8001ca0:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6b      	ldr	r2, [pc, #428]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001ca6:	6013      	str	r3, [r2, #0]
			angle_roll_acc -= 0.0;
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6b      	ldr	r2, [pc, #428]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001cae:	6013      	str	r3, [r2, #0]

			if(set_gyro_angles)
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d04e      	beq.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x46e>
			{                                                 //If the IMU is already started
				angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;     //Correct the drift of the gyro pitch angle with the accelerometer pitch angle
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fbab 	bl	8000418 <__aeabi_f2d>
 8001cc2:	a35b      	add	r3, pc, #364	; (adr r3, 8001e30 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe fbfe 	bl	80004c8 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fb9d 	bl	8000418 <__aeabi_f2d>
 8001cde:	a356      	add	r3, pc, #344	; (adr r3, 8001e38 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fbf0 	bl	80004c8 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4620      	mov	r0, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	f7fe fa34 	bl	800015c <__adddf3>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe febc 	bl	8000a78 <__aeabi_d2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001d04:	6013      	str	r3, [r2, #0]
			    angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;        //Correct the drift of the gyro roll angle with the accelerometer roll angle
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fb84 	bl	8000418 <__aeabi_f2d>
 8001d10:	a347      	add	r3, pc, #284	; (adr r3, 8001e30 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fbd7 	bl	80004c8 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4614      	mov	r4, r2
 8001d20:	461d      	mov	r5, r3
 8001d22:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fb76 	bl	8000418 <__aeabi_f2d>
 8001d2c:	a342      	add	r3, pc, #264	; (adr r3, 8001e38 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fbc9 	bl	80004c8 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fa0d 	bl	800015c <__adddf3>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe fe95 	bl	8000a78 <__aeabi_d2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e00a      	b.n	8001d6c <HAL_TIM_PeriodElapsedCallback+0x484>
			}
			else
			{                                                                //At first start
				angle_pitch = angle_pitch_acc;                                     //Set the gyro pitch angle equal to the accelerometer pitch angle
 8001d56:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001d5c:	6013      	str	r3, [r2, #0]
			    angle_roll = angle_roll_acc;                                       //Set the gyro roll angle equal to the accelerometer roll angle
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a41      	ldr	r2, [pc, #260]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d64:	6013      	str	r3, [r2, #0]
			    set_gyro_angles = true;                                            //Set the IMU started flag
 8001d66:	4b3e      	ldr	r3, [pc, #248]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
			}

			  //To dampen the pitch and roll angles a complementary filter is used
			  angle_pitch_output = angle_pitch_output * 0.9 + angle_pitch * 0.1;   //Take 90% of the output pitch value and add 10% of the raw pitch value
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb51 	bl	8000418 <__aeabi_f2d>
 8001d76:	a332      	add	r3, pc, #200	; (adr r3, 8001e40 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fba4 	bl	80004c8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fb43 	bl	8000418 <__aeabi_f2d>
 8001d92:	a32d      	add	r3, pc, #180	; (adr r3, 8001e48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fb96 	bl	80004c8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe f9da 	bl	800015c <__adddf3>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fe62 	bl	8000a78 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8001db8:	6013      	str	r3, [r2, #0]
			  angle_roll_output = angle_roll_output * 0.9 + angle_roll * 0.1;
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fb2a 	bl	8000418 <__aeabi_f2d>
 8001dc4:	a31e      	add	r3, pc, #120	; (adr r3, 8001e40 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fb7d 	bl	80004c8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb1c 	bl	8000418 <__aeabi_f2d>
 8001de0:	a319      	add	r3, pc, #100	; (adr r3, 8001e48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe fb6f 	bl	80004c8 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe f9b3 	bl	800015c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe fe3b 	bl	8000a78 <__aeabi_d2f>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8001e06:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4819      	ldr	r0, [pc, #100]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8001e0e:	f000 fdda 	bl	80029c6 <HAL_GPIO_TogglePin>
		}


	 }
 }
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e1c:	f3af 8000 	nop.w
 8001e20:	ca9691a7 	.word	0xca9691a7
 8001e24:	404ca5db 	.word	0x404ca5db
 8001e28:	ca9691a7 	.word	0xca9691a7
 8001e2c:	c04ca5db 	.word	0xc04ca5db
 8001e30:	23a29c78 	.word	0x23a29c78
 8001e34:	3feffcb9 	.word	0x3feffcb9
 8001e38:	eb1c432d 	.word	0xeb1c432d
 8001e3c:	3f3a36e2 	.word	0x3f3a36e2
 8001e40:	cccccccd 	.word	0xcccccccd
 8001e44:	3feccccc 	.word	0x3feccccc
 8001e48:	9999999a 	.word	0x9999999a
 8001e4c:	3fb99999 	.word	0x3fb99999
 8001e50:	2000056c 	.word	0x2000056c
 8001e54:	20000578 	.word	0x20000578
 8001e58:	20000588 	.word	0x20000588
 8001e5c:	20000574 	.word	0x20000574
 8001e60:	20000570 	.word	0x20000570
 8001e64:	20000558 	.word	0x20000558
 8001e68:	2000055c 	.word	0x2000055c
 8001e6c:	2000057c 	.word	0x2000057c
 8001e70:	20000580 	.word	0x20000580
 8001e74:	40011000 	.word	0x40011000

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
}
 8001e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <Error_Handler+0x8>
	...

08001e84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a14      	ldr	r2, [pc, #80]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x5c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_MspInit+0x60>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_MspInit+0x60>)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_I2C_MspInit+0x70>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d123      	bne.n	8001f50 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_I2C_MspInit+0x74>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_I2C_MspInit+0x74>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_I2C_MspInit+0x74>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f20:	23c0      	movs	r3, #192	; 0xc0
 8001f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f24:	2312      	movs	r3, #18
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4619      	mov	r1, r3
 8001f32:	480b      	ldr	r0, [pc, #44]	; (8001f60 <HAL_I2C_MspInit+0x78>)
 8001f34:	f000 fb94 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_I2C_MspInit+0x74>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_I2C_MspInit+0x74>)
 8001f3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f42:	61d3      	str	r3, [r2, #28]
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_I2C_MspInit+0x74>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f50:	bf00      	nop
 8001f52:	3720      	adds	r7, #32
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40005400 	.word	0x40005400
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40010c00 	.word	0x40010c00

08001f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a27      	ldr	r2, [pc, #156]	; (8002010 <HAL_TIM_Base_MspInit+0xac>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d114      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	4a26      	ldr	r2, [pc, #152]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f80:	6193      	str	r3, [r2, #24]
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	201b      	movs	r0, #27
 8001f94:	f000 fb2d 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f98:	201b      	movs	r0, #27
 8001f9a:	f000 fb46 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f9e:	e032      	b.n	8002006 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d114      	bne.n	8001fd4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	201c      	movs	r0, #28
 8001fc8:	f000 fb13 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fcc:	201c      	movs	r0, #28
 8001fce:	f000 fb2c 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 8001fd2:	e018      	b.n	8002006 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <HAL_TIM_Base_MspInit+0xb4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d113      	bne.n	8002006 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_TIM_Base_MspInit+0xb0>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	201d      	movs	r0, #29
 8001ffc:	f000 faf9 	bl	80025f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002000:	201d      	movs	r0, #29
 8002002:	f000 fb12 	bl	800262a <HAL_NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40000400 	.word	0x40000400

0800201c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_TIM_PWM_MspInit+0x34>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10b      	bne.n	8002046 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_TIM_PWM_MspInit+0x38>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_TIM_PWM_MspInit+0x38>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_TIM_PWM_MspInit+0x38>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40000800 	.word	0x40000800
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0318 	add.w	r3, r7, #24
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2b      	ldr	r2, [pc, #172]	; (8002120 <HAL_TIM_MspPostInit+0xc8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d130      	bne.n	80020da <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a8:	23c0      	movs	r3, #192	; 0xc0
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2302      	movs	r3, #2
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	4619      	mov	r1, r3
 80020ba:	481b      	ldr	r0, [pc, #108]	; (8002128 <HAL_TIM_MspPostInit+0xd0>)
 80020bc:	f000 fad0 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020c0:	2303      	movs	r3, #3
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2302      	movs	r3, #2
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	4619      	mov	r1, r3
 80020d2:	4816      	ldr	r0, [pc, #88]	; (800212c <HAL_TIM_MspPostInit+0xd4>)
 80020d4:	f000 fac4 	bl	8002660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020d8:	e01d      	b.n	8002116 <HAL_TIM_MspPostInit+0xbe>
  else if(htim->Instance==TIM4)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <HAL_TIM_MspPostInit+0xd8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d118      	bne.n	8002116 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_TIM_MspPostInit+0xcc>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2302      	movs	r3, #2
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210a:	f107 0318 	add.w	r3, r7, #24
 800210e:	4619      	mov	r1, r3
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <HAL_TIM_MspPostInit+0xd4>)
 8002112:	f000 faa5 	bl	8002660 <HAL_GPIO_Init>
}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40000400 	.word	0x40000400
 8002124:	40021000 	.word	0x40021000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40000800 	.word	0x40000800

08002134 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_PCD_MspInit+0x34>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10b      	bne.n	800215e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_PCD_MspInit+0x38>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_PCD_MspInit+0x38>)
 800214c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002150:	61d3      	str	r3, [r2, #28]
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_PCD_MspInit+0x38>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40005c00 	.word	0x40005c00
 800216c:	40021000 	.word	0x40021000

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b6:	f000 f905 	bl	80023c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	// Clears the EXTI's line pending bits
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <EXTI0_IRQHandler+0x54>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]

    // If Rising then reset TIM3
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != 0)
 80021ca:	2101      	movs	r1, #1
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <EXTI0_IRQHandler+0x58>)
 80021ce:	f000 fbcb 	bl	8002968 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <EXTI0_IRQHandler+0x2c>
    {
      // Reset TIM3 counter value
      htim3.Instance->CNT = 0;
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <EXTI0_IRQHandler+0x5c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <EXTI0_IRQHandler+0x5c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0201 	mvn.w	r2, #1
 80021e8:	611a      	str	r2, [r3, #16]
 80021ea:	e00e      	b.n	800220a <EXTI0_IRQHandler+0x4a>
    }
    // If Falling then record pulse using TIM3
    else
    {
      // Get TIM3 capture value
      ValuePulse1[0] = (int32_t)htim3.Instance->CNT;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <EXTI0_IRQHandler+0x5c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <EXTI0_IRQHandler+0x60>)
 80021f6:	601a      	str	r2, [r3, #0]
      // HAL library function to compare with register programming
      // LowPulse[0] = __HAL_TIM_GET_COUNTER(&htim3);
      htim3.Instance->CNT = 0;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <EXTI0_IRQHandler+0x5c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <EXTI0_IRQHandler+0x5c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0201 	mvn.w	r2, #1
 8002208:	611a      	str	r2, [r3, #16]
    }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 fbf4 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40010400 	.word	0x40010400
 8002218:	40010800 	.word	0x40010800
 800221c:	200001d0 	.word	0x200001d0
 8002220:	200005a0 	.word	0x200005a0

08002224 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002228:	2002      	movs	r0, #2
 800222a:	f000 fbe5 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}

08002232 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002236:	2004      	movs	r0, #4
 8002238:	f000 fbde 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}

08002240 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002244:	2008      	movs	r0, #8
 8002246:	f000 fbd7 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}

0800224e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002252:	2010      	movs	r0, #16
 8002254:	f000 fbd0 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002260:	2020      	movs	r0, #32
 8002262:	f000 fbc9 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM1_CC_IRQHandler+0x10>)
 8002272:	f002 fa8c 	bl	800478e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000140 	.word	0x20000140

08002280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <TIM2_IRQHandler+0x10>)
 8002286:	f002 fa82 	bl	800478e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000188 	.word	0x20000188

08002294 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM3_IRQHandler+0x10>)
 800229a:	f002 fa78 	bl	800478e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200001d0 	.word	0x200001d0

080022a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022b0:	f000 fba2 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80022b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022b8:	f000 fb9e 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80022bc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022c0:	f000 fb9a 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022c8:	f000 fb96 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80022cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022d0:	f000 fb92 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80022d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022d8:	f000 fb8e 	bl	80029f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ee:	490d      	ldr	r1, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002304:	4c0a      	ldr	r4, [pc, #40]	; (8002330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002312:	f7ff ffe5 	bl	80022e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f003 f83f 	bl	8005398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231a:	f7fe ffab 	bl	8001274 <main>
  bx lr
 800231e:	4770      	bx	lr
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002328:	08006c28 	.word	0x08006c28
  ldr r2, =_sbss
 800232c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002330:	200005bc 	.word	0x200005bc

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_Init+0x28>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_Init+0x28>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 f947 	bl	80025dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	200f      	movs	r0, #15
 8002350:	f000 f808 	bl	8002364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fd96 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_InitTick+0x54>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_InitTick+0x58>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4619      	mov	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	fbb3 f3f1 	udiv	r3, r3, r1
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f95f 	bl	8002646 <HAL_SYSTICK_Config>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e00e      	b.n	80023b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d80a      	bhi.n	80023ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002398:	2200      	movs	r2, #0
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f000 f927 	bl	80025f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <HAL_InitTick+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000004 	.word	0x20000004
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	20000008 	.word	0x20000008

080023c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_IncTick+0x1c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_IncTick+0x20>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a03      	ldr	r2, [pc, #12]	; (80023e4 <HAL_IncTick+0x20>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	200005b8 	.word	0x200005b8

080023e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <HAL_GetTick+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	200005b8 	.word	0x200005b8

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff fff0 	bl	80023e8 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002414:	d005      	beq.n	8002422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_Delay+0x44>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002422:	bf00      	nop
 8002424:	f7ff ffe0 	bl	80023e8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d8f7      	bhi.n	8002424 <HAL_Delay+0x28>
  {
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000000c 	.word	0x2000000c

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4906      	ldr	r1, [pc, #24]	; (80024dc <__NVIC_EnableIRQ+0x34>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a8:	d301      	bcc.n	80025ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00f      	b.n	80025ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <SysTick_Config+0x40>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b6:	210f      	movs	r1, #15
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	f7ff ff90 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <SysTick_Config+0x40>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <SysTick_Config+0x40>)
 80025c8:	2207      	movs	r2, #7
 80025ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	e000e010 	.word	0xe000e010

080025dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ff2d 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff42 	bl	800248c <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff90 	bl	8002534 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5f 	bl	80024e0 <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff35 	bl	80024a8 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa2 	bl	8002598 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b08b      	sub	sp, #44	; 0x2c
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002672:	e169      	b.n	8002948 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002674:	2201      	movs	r2, #1
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	429a      	cmp	r2, r3
 800268e:	f040 8158 	bne.w	8002942 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4a9a      	ldr	r2, [pc, #616]	; (8002900 <HAL_GPIO_Init+0x2a0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d05e      	beq.n	800275a <HAL_GPIO_Init+0xfa>
 800269c:	4a98      	ldr	r2, [pc, #608]	; (8002900 <HAL_GPIO_Init+0x2a0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d875      	bhi.n	800278e <HAL_GPIO_Init+0x12e>
 80026a2:	4a98      	ldr	r2, [pc, #608]	; (8002904 <HAL_GPIO_Init+0x2a4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d058      	beq.n	800275a <HAL_GPIO_Init+0xfa>
 80026a8:	4a96      	ldr	r2, [pc, #600]	; (8002904 <HAL_GPIO_Init+0x2a4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d86f      	bhi.n	800278e <HAL_GPIO_Init+0x12e>
 80026ae:	4a96      	ldr	r2, [pc, #600]	; (8002908 <HAL_GPIO_Init+0x2a8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d052      	beq.n	800275a <HAL_GPIO_Init+0xfa>
 80026b4:	4a94      	ldr	r2, [pc, #592]	; (8002908 <HAL_GPIO_Init+0x2a8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d869      	bhi.n	800278e <HAL_GPIO_Init+0x12e>
 80026ba:	4a94      	ldr	r2, [pc, #592]	; (800290c <HAL_GPIO_Init+0x2ac>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d04c      	beq.n	800275a <HAL_GPIO_Init+0xfa>
 80026c0:	4a92      	ldr	r2, [pc, #584]	; (800290c <HAL_GPIO_Init+0x2ac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d863      	bhi.n	800278e <HAL_GPIO_Init+0x12e>
 80026c6:	4a92      	ldr	r2, [pc, #584]	; (8002910 <HAL_GPIO_Init+0x2b0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d046      	beq.n	800275a <HAL_GPIO_Init+0xfa>
 80026cc:	4a90      	ldr	r2, [pc, #576]	; (8002910 <HAL_GPIO_Init+0x2b0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d85d      	bhi.n	800278e <HAL_GPIO_Init+0x12e>
 80026d2:	2b12      	cmp	r3, #18
 80026d4:	d82a      	bhi.n	800272c <HAL_GPIO_Init+0xcc>
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d859      	bhi.n	800278e <HAL_GPIO_Init+0x12e>
 80026da:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <HAL_GPIO_Init+0x80>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	0800275b 	.word	0x0800275b
 80026e4:	08002735 	.word	0x08002735
 80026e8:	08002747 	.word	0x08002747
 80026ec:	08002789 	.word	0x08002789
 80026f0:	0800278f 	.word	0x0800278f
 80026f4:	0800278f 	.word	0x0800278f
 80026f8:	0800278f 	.word	0x0800278f
 80026fc:	0800278f 	.word	0x0800278f
 8002700:	0800278f 	.word	0x0800278f
 8002704:	0800278f 	.word	0x0800278f
 8002708:	0800278f 	.word	0x0800278f
 800270c:	0800278f 	.word	0x0800278f
 8002710:	0800278f 	.word	0x0800278f
 8002714:	0800278f 	.word	0x0800278f
 8002718:	0800278f 	.word	0x0800278f
 800271c:	0800278f 	.word	0x0800278f
 8002720:	0800278f 	.word	0x0800278f
 8002724:	0800273d 	.word	0x0800273d
 8002728:	08002751 	.word	0x08002751
 800272c:	4a79      	ldr	r2, [pc, #484]	; (8002914 <HAL_GPIO_Init+0x2b4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002732:	e02c      	b.n	800278e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	623b      	str	r3, [r7, #32]
          break;
 800273a:	e029      	b.n	8002790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	3304      	adds	r3, #4
 8002742:	623b      	str	r3, [r7, #32]
          break;
 8002744:	e024      	b.n	8002790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	3308      	adds	r3, #8
 800274c:	623b      	str	r3, [r7, #32]
          break;
 800274e:	e01f      	b.n	8002790 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	330c      	adds	r3, #12
 8002756:	623b      	str	r3, [r7, #32]
          break;
 8002758:	e01a      	b.n	8002790 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002762:	2304      	movs	r3, #4
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e013      	b.n	8002790 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d105      	bne.n	800277c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002770:	2308      	movs	r3, #8
 8002772:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	611a      	str	r2, [r3, #16]
          break;
 800277a:	e009      	b.n	8002790 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800277c:	2308      	movs	r3, #8
 800277e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	615a      	str	r2, [r3, #20]
          break;
 8002786:	e003      	b.n	8002790 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
          break;
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x130>
          break;
 800278e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2bff      	cmp	r3, #255	; 0xff
 8002794:	d801      	bhi.n	800279a <HAL_GPIO_Init+0x13a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	e001      	b.n	800279e <HAL_GPIO_Init+0x13e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2bff      	cmp	r3, #255	; 0xff
 80027a4:	d802      	bhi.n	80027ac <HAL_GPIO_Init+0x14c>
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	e002      	b.n	80027b2 <HAL_GPIO_Init+0x152>
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	3b08      	subs	r3, #8
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	210f      	movs	r1, #15
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	401a      	ands	r2, r3
 80027c4:	6a39      	ldr	r1, [r7, #32]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	431a      	orrs	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80b1 	beq.w	8002942 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027e0:	4b4d      	ldr	r3, [pc, #308]	; (8002918 <HAL_GPIO_Init+0x2b8>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	4a4c      	ldr	r2, [pc, #304]	; (8002918 <HAL_GPIO_Init+0x2b8>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6193      	str	r3, [r2, #24]
 80027ec:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <HAL_GPIO_Init+0x2b8>)
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027f8:	4a48      	ldr	r2, [pc, #288]	; (800291c <HAL_GPIO_Init+0x2bc>)
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	089b      	lsrs	r3, r3, #2
 80027fe:	3302      	adds	r3, #2
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4013      	ands	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a40      	ldr	r2, [pc, #256]	; (8002920 <HAL_GPIO_Init+0x2c0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_GPIO_Init+0x1ec>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_GPIO_Init+0x2c4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00d      	beq.n	8002848 <HAL_GPIO_Init+0x1e8>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3e      	ldr	r2, [pc, #248]	; (8002928 <HAL_GPIO_Init+0x2c8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <HAL_GPIO_Init+0x1e4>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3d      	ldr	r2, [pc, #244]	; (800292c <HAL_GPIO_Init+0x2cc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_GPIO_Init+0x1e0>
 800283c:	2303      	movs	r3, #3
 800283e:	e006      	b.n	800284e <HAL_GPIO_Init+0x1ee>
 8002840:	2304      	movs	r3, #4
 8002842:	e004      	b.n	800284e <HAL_GPIO_Init+0x1ee>
 8002844:	2302      	movs	r3, #2
 8002846:	e002      	b.n	800284e <HAL_GPIO_Init+0x1ee>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_GPIO_Init+0x1ee>
 800284c:	2300      	movs	r3, #0
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	f002 0203 	and.w	r2, r2, #3
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	4093      	lsls	r3, r2
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800285e:	492f      	ldr	r1, [pc, #188]	; (800291c <HAL_GPIO_Init+0x2bc>)
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	492c      	ldr	r1, [pc, #176]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	43db      	mvns	r3, r3
 800288e:	4928      	ldr	r1, [pc, #160]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 8002890:	4013      	ands	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	491e      	ldr	r1, [pc, #120]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4918      	ldr	r1, [pc, #96]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]
 80028d4:	e006      	b.n	80028e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	43db      	mvns	r3, r3
 80028de:	4914      	ldr	r1, [pc, #80]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d021      	beq.n	8002934 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	490e      	ldr	r1, [pc, #56]	; (8002930 <HAL_GPIO_Init+0x2d0>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60cb      	str	r3, [r1, #12]
 80028fc:	e021      	b.n	8002942 <HAL_GPIO_Init+0x2e2>
 80028fe:	bf00      	nop
 8002900:	10320000 	.word	0x10320000
 8002904:	10310000 	.word	0x10310000
 8002908:	10220000 	.word	0x10220000
 800290c:	10210000 	.word	0x10210000
 8002910:	10120000 	.word	0x10120000
 8002914:	10110000 	.word	0x10110000
 8002918:	40021000 	.word	0x40021000
 800291c:	40010000 	.word	0x40010000
 8002920:	40010800 	.word	0x40010800
 8002924:	40010c00 	.word	0x40010c00
 8002928:	40011000 	.word	0x40011000
 800292c:	40011400 	.word	0x40011400
 8002930:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_GPIO_Init+0x304>)
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	43db      	mvns	r3, r3
 800293c:	4909      	ldr	r1, [pc, #36]	; (8002964 <HAL_GPIO_Init+0x304>)
 800293e:	4013      	ands	r3, r2
 8002940:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3301      	adds	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	f47f ae8e 	bne.w	8002674 <HAL_GPIO_Init+0x14>
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	372c      	adds	r7, #44	; 0x2c
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	40010400 	.word	0x40010400

08002968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	887b      	ldrh	r3, [r7, #2]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
 8002984:	e001      	b.n	800298a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	807b      	strh	r3, [r7, #2]
 80029a2:	4613      	mov	r3, r2
 80029a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a6:	787b      	ldrb	r3, [r7, #1]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b2:	e003      	b.n	80029bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	041a      	lsls	r2, r3, #16
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	611a      	str	r2, [r3, #16]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4013      	ands	r3, r2
 80029de:	041a      	lsls	r2, r3, #16
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	400b      	ands	r3, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a02:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0e:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f806 	bl	8002a28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40010400 	.word	0x40010400

08002a28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e12b      	b.n	8002ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fa40 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa0:	f001 fc9c 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8002aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a81      	ldr	r2, [pc, #516]	; (8002cb0 <HAL_I2C_Init+0x274>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d807      	bhi.n	8002ac0 <HAL_I2C_Init+0x84>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a80      	ldr	r2, [pc, #512]	; (8002cb4 <HAL_I2C_Init+0x278>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bf94      	ite	ls
 8002ab8:	2301      	movls	r3, #1
 8002aba:	2300      	movhi	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e006      	b.n	8002ace <HAL_I2C_Init+0x92>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a7d      	ldr	r2, [pc, #500]	; (8002cb8 <HAL_I2C_Init+0x27c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0e7      	b.n	8002ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a78      	ldr	r2, [pc, #480]	; (8002cbc <HAL_I2C_Init+0x280>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9b      	lsrs	r3, r3, #18
 8002ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	; (8002cb0 <HAL_I2C_Init+0x274>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d802      	bhi.n	8002b10 <HAL_I2C_Init+0xd4>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	e009      	b.n	8002b24 <HAL_I2C_Init+0xe8>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	4a69      	ldr	r2, [pc, #420]	; (8002cc0 <HAL_I2C_Init+0x284>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	3301      	adds	r3, #1
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	495c      	ldr	r1, [pc, #368]	; (8002cb0 <HAL_I2C_Init+0x274>)
 8002b40:	428b      	cmp	r3, r1
 8002b42:	d819      	bhi.n	8002b78 <HAL_I2C_Init+0x13c>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e59      	subs	r1, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b52:	1c59      	adds	r1, r3, #1
 8002b54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b58:	400b      	ands	r3, r1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_I2C_Init+0x138>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1e59      	subs	r1, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b72:	e051      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002b74:	2304      	movs	r3, #4
 8002b76:	e04f      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <HAL_I2C_Init+0x168>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e012      	b.n	8002bca <HAL_I2C_Init+0x18e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Init+0x196>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e022      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_I2C_Init+0x1bc>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e58      	subs	r0, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	440b      	add	r3, r1
 8002be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf6:	e00f      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6809      	ldr	r1, [r1, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6911      	ldr	r1, [r2, #16]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68d2      	ldr	r2, [r2, #12]
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	000186a0 	.word	0x000186a0
 8002cb4:	001e847f 	.word	0x001e847f
 8002cb8:	003d08ff 	.word	0x003d08ff
 8002cbc:	431bde83 	.word	0x431bde83
 8002cc0:	10624dd3 	.word	0x10624dd3

08002cc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff fb86 	bl	80023e8 <HAL_GetTick>
 8002cdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	f040 80e0 	bne.w	8002eac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2319      	movs	r3, #25
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4970      	ldr	r1, [pc, #448]	; (8002eb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 fcb4 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0d3      	b.n	8002eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2C_Master_Transmit+0x50>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0cc      	b.n	8002eae <HAL_I2C_Master_Transmit+0x1ea>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d007      	beq.n	8002d3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2221      	movs	r2, #33	; 0x21
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2210      	movs	r2, #16
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a50      	ldr	r2, [pc, #320]	; (8002ebc <HAL_I2C_Master_Transmit+0x1f8>)
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d7c:	8979      	ldrh	r1, [r7, #10]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fb04 	bl	8003390 <I2C_MasterRequestWrite>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e08d      	b.n	8002eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002da8:	e066      	b.n	8002e78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	6a39      	ldr	r1, [r7, #32]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fd2e 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d107      	bne.n	8002dd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06b      	b.n	8002eae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d11b      	bne.n	8002e4c <HAL_I2C_Master_Transmit+0x188>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d017      	beq.n	8002e4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	6a39      	ldr	r1, [r7, #32]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fd1e 	bl	8003892 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e01a      	b.n	8002eae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d194      	bne.n	8002daa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	00100002 	.word	0x00100002
 8002ebc:	ffff0000 	.word	0xffff0000

08002ec0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08c      	sub	sp, #48	; 0x30
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	813b      	strh	r3, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ede:	f7ff fa83 	bl	80023e8 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	f040 8244 	bne.w	800337a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2319      	movs	r3, #25
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4982      	ldr	r1, [pc, #520]	; (8003104 <HAL_I2C_Mem_Read+0x244>)
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fbb1 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e237      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x5a>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e230      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d007      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2222      	movs	r2, #34	; 0x22
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2240      	movs	r2, #64	; 0x40
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a62      	ldr	r2, [pc, #392]	; (8003108 <HAL_I2C_Mem_Read+0x248>)
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f82:	88f8      	ldrh	r0, [r7, #6]
 8002f84:	893a      	ldrh	r2, [r7, #8]
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fa7e 	bl	8003494 <I2C_RequestMemoryRead>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1ec      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e1c0      	b.n	8003354 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11e      	bne.n	8003018 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fea:	b672      	cpsid	i
}
 8002fec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003014:	b662      	cpsie	i
}
 8003016:	e035      	b.n	8003084 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	2b02      	cmp	r3, #2
 800301e:	d11e      	bne.n	800305e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003030:	b672      	cpsid	i
}
 8003032:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003058:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800305a:	b662      	cpsie	i
}
 800305c:	e012      	b.n	8003084 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800306c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003084:	e166      	b.n	8003354 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	2b03      	cmp	r3, #3
 800308c:	f200 811f 	bhi.w	80032ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b01      	cmp	r3, #1
 8003096:	d123      	bne.n	80030e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fc39 	bl	8003914 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e167      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030de:	e139      	b.n	8003354 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d152      	bne.n	800318e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	2200      	movs	r2, #0
 80030f0:	4906      	ldr	r1, [pc, #24]	; (800310c <HAL_I2C_Mem_Read+0x24c>)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fab6 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e13c      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
 8003102:	bf00      	nop
 8003104:	00100002 	.word	0x00100002
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003110:	b672      	cpsid	i
}
 8003112:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003156:	b662      	cpsie	i
}
 8003158:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800318c:	e0e2      	b.n	8003354 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2200      	movs	r2, #0
 8003196:	497b      	ldr	r1, [pc, #492]	; (8003384 <HAL_I2C_Mem_Read+0x4c4>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fa63 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0e9      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031b8:	b672      	cpsid	i
}
 80031ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031ee:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_I2C_Mem_Read+0x4c8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	08db      	lsrs	r3, r3, #3
 80031f4:	4a65      	ldr	r2, [pc, #404]	; (800338c <HAL_I2C_Mem_Read+0x4cc>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0a1a      	lsrs	r2, r3, #8
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00da      	lsls	r2, r3, #3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	3b01      	subs	r3, #1
 800320c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d118      	bne.n	8003246 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003236:	b662      	cpsie	i
}
 8003238:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e09a      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d1d9      	bne.n	8003208 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003296:	b662      	cpsie	i
}
 8003298:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032cc:	e042      	b.n	8003354 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fb1e 	bl	8003914 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e04c      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b04      	cmp	r3, #4
 8003320:	d118      	bne.n	8003354 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	f47f ae94 	bne.w	8003086 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	00010004 	.word	0x00010004
 8003388:	20000004 	.word	0x20000004
 800338c:	14f8b589 	.word	0x14f8b589

08003390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d006      	beq.n	80033ba <I2C_MasterRequestWrite+0x2a>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d003      	beq.n	80033ba <I2C_MasterRequestWrite+0x2a>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b8:	d108      	bne.n	80033cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e00b      	b.n	80033e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2b12      	cmp	r3, #18
 80033d2:	d107      	bne.n	80033e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f937 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340a:	d103      	bne.n	8003414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e035      	b.n	8003484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003420:	d108      	bne.n	8003434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	e01b      	b.n	800346c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003434:	897b      	ldrh	r3, [r7, #10]
 8003436:	11db      	asrs	r3, r3, #7
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 0306 	and.w	r3, r3, #6
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f063 030f 	orn	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <I2C_MasterRequestWrite+0xfc>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f95d 	bl	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e010      	b.n	8003484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <I2C_MasterRequestWrite+0x100>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f94d 	bl	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	00010008 	.word	0x00010008
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8c2 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d103      	bne.n	80034fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0aa      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	4952      	ldr	r1, [pc, #328]	; (8003660 <I2C_RequestMemoryRead+0x1cc>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f8fa 	bl	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e097      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f964 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e076      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003570:	893b      	ldrh	r3, [r7, #8]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]
 800357a:	e021      	b.n	80035c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800357c:	893b      	ldrh	r3, [r7, #8]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	6a39      	ldr	r1, [r7, #32]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f93e 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d107      	bne.n	80035b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e050      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	6a39      	ldr	r1, [r7, #32]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f923 	bl	8003810 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e035      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2200      	movs	r2, #0
 8003604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f82b 	bl	8003664 <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003622:	d103      	bne.n	800362c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e013      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003630:	897b      	ldrh	r3, [r7, #10]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6a3a      	ldr	r2, [r7, #32]
 8003644:	4906      	ldr	r1, [pc, #24]	; (8003660 <I2C_RequestMemoryRead+0x1cc>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f863 	bl	8003712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00010002 	.word	0x00010002

08003664 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003674:	e025      	b.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d021      	beq.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe feb3 	bl	80023e8 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d116      	bne.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e023      	b.n	800370a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10d      	bne.n	80036e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	e00c      	b.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	429a      	cmp	r2, r3
 8003706:	d0b6      	beq.n	8003676 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003720:	e051      	b.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d123      	bne.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800374a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f043 0204 	orr.w	r2, r3, #4
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e046      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d021      	beq.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fe fe31 	bl	80023e8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d116      	bne.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e020      	b.n	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d10c      	bne.n	80037ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e00b      	b.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	43da      	mvns	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4013      	ands	r3, r2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d18d      	bne.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800381c:	e02d      	b.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f8ce 	bl	80039c0 <I2C_IsAcknowledgeFailed>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e02d      	b.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d021      	beq.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fe fdd7 	bl	80023e8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e007      	b.n	800388a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d1ca      	bne.n	800381e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800389e:	e02d      	b.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f88d 	bl	80039c0 <I2C_IsAcknowledgeFailed>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e02d      	b.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d021      	beq.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe fd96 	bl	80023e8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d1ca      	bne.n	80038a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003920:	e042      	b.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d119      	bne.n	8003964 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e029      	b.n	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	f7fe fd40 	bl	80023e8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e007      	b.n	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d1b5      	bne.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d11b      	bne.n	8003a10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1e:	b08b      	sub	sp, #44	; 0x2c
 8003a20:	af06      	add	r7, sp, #24
 8003a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0fd      	b.n	8003c2a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fe fb76 	bl	8002134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fc49 	bl	80052ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	687e      	ldr	r6, [r7, #4]
 8003a62:	466d      	mov	r5, sp
 8003a64:	f106 0410 	add.w	r4, r6, #16
 8003a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	602b      	str	r3, [r5, #0]
 8003a70:	1d33      	adds	r3, r6, #4
 8003a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a74:	6838      	ldr	r0, [r7, #0]
 8003a76:	f001 fc29 	bl	80052cc <USB_CoreInit>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0ce      	b.n	8003c2a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fc44 	bl	8005320 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e04c      	b.n	8003b38 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	3301      	adds	r3, #1
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	440b      	add	r3, r1
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	b298      	uxth	r0, r3
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	440b      	add	r3, r1
 8003ada:	3336      	adds	r3, #54	; 0x36
 8003adc:	4602      	mov	r2, r0
 8003ade:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	440b      	add	r3, r1
 8003af0:	3303      	adds	r3, #3
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	3338      	adds	r3, #56	; 0x38
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	333c      	adds	r3, #60	; 0x3c
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3340      	adds	r3, #64	; 0x40
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	3301      	adds	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3ad      	bcc.n	8003a9e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e044      	b.n	8003bd2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ba0:	7bfa      	ldrb	r2, [r7, #15]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d3b5      	bcc.n	8003b48 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	687e      	ldr	r6, [r7, #4]
 8003be4:	466d      	mov	r5, sp
 8003be6:	f106 0410 	add.w	r4, r6, #16
 8003bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	1d33      	adds	r3, r6, #4
 8003bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bf6:	6838      	ldr	r0, [r7, #0]
 8003bf8:	f001 fb9e 	bl	8005338 <USB_DevInit>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e00d      	b.n	8003c2a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 fba8 	bl	8005378 <USB_DevDisconnect>

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e272      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8087 	beq.w	8003d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c54:	4b92      	ldr	r3, [pc, #584]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d00c      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c60:	4b8f      	ldr	r3, [pc, #572]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d112      	bne.n	8003c92 <HAL_RCC_OscConfig+0x5e>
 8003c6c:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d10b      	bne.n	8003c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7a:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d06c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x12c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d168      	bne.n	8003d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e24c      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x76>
 8003c9c:	4b80      	ldr	r3, [pc, #512]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7f      	ldr	r2, [pc, #508]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e02e      	b.n	8003d08 <HAL_RCC_OscConfig+0xd4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x98>
 8003cb2:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7a      	ldr	r2, [pc, #488]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b78      	ldr	r3, [pc, #480]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a77      	ldr	r2, [pc, #476]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e01d      	b.n	8003d08 <HAL_RCC_OscConfig+0xd4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0xbc>
 8003cd6:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a71      	ldr	r2, [pc, #452]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b6f      	ldr	r3, [pc, #444]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a6e      	ldr	r2, [pc, #440]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0xd4>
 8003cf0:	4b6b      	ldr	r3, [pc, #428]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a67      	ldr	r2, [pc, #412]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d013      	beq.n	8003d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe fb6a 	bl	80023e8 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fe fb66 	bl	80023e8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e200      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0xe4>
 8003d36:	e014      	b.n	8003d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe fb56 	bl	80023e8 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fe fb52 	bl	80023e8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1ec      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x10c>
 8003d5e:	e000      	b.n	8003d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d063      	beq.n	8003e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6e:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d7a:	4b49      	ldr	r3, [pc, #292]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d11c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x18c>
 8003d86:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_RCC_OscConfig+0x176>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d001      	beq.n	8003daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1c0      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003daa:	4b3d      	ldr	r3, [pc, #244]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4939      	ldr	r1, [pc, #228]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	e03a      	b.n	8003e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe fb0b 	bl	80023e8 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd6:	f7fe fb07 	bl	80023e8 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1a1      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	4b2d      	ldr	r3, [pc, #180]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df4:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4927      	ldr	r1, [pc, #156]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	600b      	str	r3, [r1, #0]
 8003e08:	e015      	b.n	8003e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0a:	4b26      	ldr	r3, [pc, #152]	; (8003ea4 <HAL_RCC_OscConfig+0x270>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe faea 	bl	80023e8 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fe fae6 	bl	80023e8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e180      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03a      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d019      	beq.n	8003e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4a:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fe faca 	bl	80023e8 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fe fac6 	bl	80023e8 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e160      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e76:	2001      	movs	r0, #1
 8003e78:	f000 fac4 	bl	8004404 <RCC_Delay>
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_RCC_OscConfig+0x274>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e84:	f7fe fab0 	bl	80023e8 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8a:	e00f      	b.n	8003eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fe faac 	bl	80023e8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d908      	bls.n	8003eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e146      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
 8003e9e:	bf00      	nop
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	42420000 	.word	0x42420000
 8003ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e9      	bne.n	8003e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a6 	beq.w	8004012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10d      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a87      	ldr	r2, [pc, #540]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]
 8003ee2:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d118      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efe:	4b7f      	ldr	r3, [pc, #508]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7e      	ldr	r2, [pc, #504]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0a:	f7fe fa6d 	bl	80023e8 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fe fa69 	bl	80023e8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e103      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b75      	ldr	r3, [pc, #468]	; (80040fc <HAL_RCC_OscConfig+0x4c8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x312>
 8003f38:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6213      	str	r3, [r2, #32]
 8003f44:	e02d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x36e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x334>
 8003f4e:	4b6a      	ldr	r3, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a69      	ldr	r2, [pc, #420]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	f023 0301 	bic.w	r3, r3, #1
 8003f58:	6213      	str	r3, [r2, #32]
 8003f5a:	4b67      	ldr	r3, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	6213      	str	r3, [r2, #32]
 8003f66:	e01c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x36e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b05      	cmp	r3, #5
 8003f6e:	d10c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x356>
 8003f70:	4b61      	ldr	r3, [pc, #388]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a60      	ldr	r2, [pc, #384]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	f043 0304 	orr.w	r3, r3, #4
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	4b5e      	ldr	r3, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	4a5d      	ldr	r2, [pc, #372]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6213      	str	r3, [r2, #32]
 8003f88:	e00b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x36e>
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	6213      	str	r3, [r2, #32]
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a57      	ldr	r2, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d015      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003faa:	f7fe fa1d 	bl	80023e8 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fe fa19 	bl	80023e8 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0b1      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	4b4b      	ldr	r3, [pc, #300]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0ee      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x37e>
 8003fd4:	e014      	b.n	8004000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fa07 	bl	80023e8 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fa03 	bl	80023e8 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e09b      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ee      	bne.n	8003fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4a3b      	ldr	r2, [pc, #236]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8087 	beq.w	800412a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800401c:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b08      	cmp	r3, #8
 8004026:	d061      	beq.n	80040ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d146      	bne.n	80040be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b33      	ldr	r3, [pc, #204]	; (8004100 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fe f9d7 	bl	80023e8 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe f9d3 	bl	80023e8 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e06d      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d108      	bne.n	8004078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4921      	ldr	r1, [pc, #132]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004078:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a19      	ldr	r1, [r3, #32]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	430b      	orrs	r3, r1
 800408a:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <HAL_RCC_OscConfig+0x4cc>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fe f9a7 	bl	80023e8 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe f9a3 	bl	80023e8 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03d      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x46a>
 80040bc:	e035      	b.n	800412a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCC_OscConfig+0x4cc>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe f990 	bl	80023e8 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f98c 	bl	80023e8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e026      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x498>
 80040ea:	e01e      	b.n	800412a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e019      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_RCC_OscConfig+0x500>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	429a      	cmp	r2, r3
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000

08004138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0d0      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800414c:	4b6a      	ldr	r3, [pc, #424]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d910      	bls.n	800417c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b67      	ldr	r3, [pc, #412]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 0207 	bic.w	r2, r3, #7
 8004162:	4965      	ldr	r1, [pc, #404]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0b8      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800419e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	494d      	ldr	r1, [pc, #308]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d040      	beq.n	8004258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d115      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e073      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004206:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e06b      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f023 0203 	bic.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4936      	ldr	r1, [pc, #216]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004228:	f7fe f8de 	bl	80023e8 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	e00a      	b.n	8004246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fe f8da 	bl	80023e8 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e053      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 020c 	and.w	r2, r3, #12
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	429a      	cmp	r2, r3
 8004256:	d1eb      	bne.n	8004230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d210      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	4922      	ldr	r1, [pc, #136]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e032      	b.n	80042ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4916      	ldr	r1, [pc, #88]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c6:	f000 f821 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x1c4>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490a      	ldr	r1, [pc, #40]	; (8004300 <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1cc>)
 80042e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1d0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fe f83c 	bl	8002364 <HAL_InitTick>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40022000 	.word	0x40022000
 80042fc:	40021000 	.word	0x40021000
 8004300:	08006a28 	.word	0x08006a28
 8004304:	20000004 	.word	0x20000004
 8004308:	20000008 	.word	0x20000008

0800430c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	b490      	push	{r4, r7}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004312:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004314:	1d3c      	adds	r4, r7, #4
 8004316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800431c:	f240 2301 	movw	r3, #513	; 0x201
 8004320:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b04      	cmp	r3, #4
 8004344:	d002      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x40>
 8004346:	2b08      	cmp	r3, #8
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x46>
 800434a:	e02b      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800434c:	4b1c      	ldr	r3, [pc, #112]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800434e:	623b      	str	r3, [r7, #32]
      break;
 8004350:	e02b      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	0c9b      	lsrs	r3, r3, #18
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3328      	adds	r3, #40	; 0x28
 800435c:	443b      	add	r3, r7
 800435e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004362:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d012      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	0c5b      	lsrs	r3, r3, #17
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	3328      	adds	r3, #40	; 0x28
 800437a:	443b      	add	r3, r7
 800437c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004380:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004386:	fb03 f202 	mul.w	r2, r3, r2
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
 8004392:	e004      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4a0b      	ldr	r2, [pc, #44]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	623b      	str	r3, [r7, #32]
      break;
 80043a2:	e002      	b.n	80043aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043a6:	623b      	str	r3, [r7, #32]
      break;
 80043a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043aa:	6a3b      	ldr	r3, [r7, #32]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3728      	adds	r7, #40	; 0x28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc90      	pop	{r4, r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	08006a18 	.word	0x08006a18
 80043bc:	40021000 	.word	0x40021000
 80043c0:	007a1200 	.word	0x007a1200
 80043c4:	003d0900 	.word	0x003d0900

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b02      	ldr	r3, [pc, #8]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	20000004 	.word	0x20000004

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff2 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	08006a38 	.word	0x08006a38

08004404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <RCC_Delay+0x34>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0a      	ldr	r2, [pc, #40]	; (800443c <RCC_Delay+0x38>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0a5b      	lsrs	r3, r3, #9
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004420:	bf00      	nop
  }
  while (Delay --);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1e5a      	subs	r2, r3, #1
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f9      	bne.n	8004420 <RCC_Delay+0x1c>
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	20000004 	.word	0x20000004
 800443c:	10624dd3 	.word	0x10624dd3

08004440 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d07d      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800445c:	2300      	movs	r3, #0
 800445e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004460:	4b4f      	ldr	r3, [pc, #316]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10d      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446c:	4b4c      	ldr	r3, [pc, #304]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4a4b      	ldr	r2, [pc, #300]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004476:	61d3      	str	r3, [r2, #28]
 8004478:	4b49      	ldr	r3, [pc, #292]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b46      	ldr	r3, [pc, #280]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d118      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004494:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a0:	f7fd ffa2 	bl	80023e8 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a6:	e008      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fd ff9e 	bl	80023e8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b64      	cmp	r3, #100	; 0x64
 80044b4:	d901      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e06d      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044c6:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d02e      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d027      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044e4:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044ee:	4b2e      	ldr	r3, [pc, #184]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044f4:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044fa:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d014      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fd ff6d 	bl	80023e8 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fd ff69 	bl	80023e8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e036      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004534:	4b1a      	ldr	r3, [pc, #104]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4917      	ldr	r1, [pc, #92]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	4313      	orrs	r3, r2
 8004544:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	490b      	ldr	r1, [pc, #44]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40007000 	.word	0x40007000
 80045a8:	42420440 	.word	0x42420440

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e041      	b.n	8004642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd fcc6 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 fb7e 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	d001      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e03a      	b.n	80046da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_TIM_Base_Start_IT+0x98>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00e      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0x58>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468e:	d009      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0x58>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <HAL_TIM_Base_Start_IT+0x58>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a13      	ldr	r2, [pc, #76]	; (80046ec <HAL_TIM_Base_Start_IT+0xa0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d111      	bne.n	80046c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d010      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	e007      	b.n	80046d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800

080046f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e041      	b.n	8004786 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd fc80 	bl	800201c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fadc 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d122      	bne.n	80047ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d11b      	bne.n	80047ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f06f 0202 	mvn.w	r2, #2
 80047ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fa70 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 80047d6:	e005      	b.n	80047e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa63 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa72 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d122      	bne.n	800483e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b04      	cmp	r3, #4
 8004804:	d11b      	bne.n	800483e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f06f 0204 	mvn.w	r2, #4
 800480e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa46 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 800482a:	e005      	b.n	8004838 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa39 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa48 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d122      	bne.n	8004892 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b08      	cmp	r3, #8
 8004858:	d11b      	bne.n	8004892 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0208 	mvn.w	r2, #8
 8004862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa1c 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 800487e:	e005      	b.n	800488c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fa0f 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa1e 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d122      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d11b      	bne.n	80048e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0210 	mvn.w	r2, #16
 80048b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2208      	movs	r2, #8
 80048bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f9f2 	bl	8004cb6 <HAL_TIM_IC_CaptureCallback>
 80048d2:	e005      	b.n	80048e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9e5 	bl	8004ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9f4 	bl	8004cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10e      	bne.n	8004912 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d107      	bne.n	8004912 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f06f 0201 	mvn.w	r2, #1
 800490a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fc ffeb 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d10e      	bne.n	800493e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d107      	bne.n	800493e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fcbe 	bl	80052ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	d10e      	bne.n	800496a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b40      	cmp	r3, #64	; 0x40
 8004958:	d107      	bne.n	800496a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f9b8 	bl	8004cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b20      	cmp	r3, #32
 8004976:	d10e      	bne.n	8004996 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b20      	cmp	r3, #32
 8004984:	d107      	bne.n	8004996 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f06f 0220 	mvn.w	r2, #32
 800498e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fc89 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0ac      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x174>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	f200 809f 	bhi.w	8004b08 <HAL_TIM_PWM_ConfigChannel+0x168>
 80049ca:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004b09 	.word	0x08004b09
 80049d8:	08004b09 	.word	0x08004b09
 80049dc:	08004b09 	.word	0x08004b09
 80049e0:	08004a45 	.word	0x08004a45
 80049e4:	08004b09 	.word	0x08004b09
 80049e8:	08004b09 	.word	0x08004b09
 80049ec:	08004b09 	.word	0x08004b09
 80049f0:	08004a87 	.word	0x08004a87
 80049f4:	08004b09 	.word	0x08004b09
 80049f8:	08004b09 	.word	0x08004b09
 80049fc:	08004b09 	.word	0x08004b09
 8004a00:	08004ac7 	.word	0x08004ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f9d0 	bl	8004db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0208 	orr.w	r2, r2, #8
 8004a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6999      	ldr	r1, [r3, #24]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	619a      	str	r2, [r3, #24]
      break;
 8004a42:	e062      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fa16 	bl	8004e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6999      	ldr	r1, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	021a      	lsls	r2, r3, #8
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]
      break;
 8004a84:	e041      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa5f 	bl	8004f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0208 	orr.w	r2, r2, #8
 8004aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0204 	bic.w	r2, r2, #4
 8004ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	61da      	str	r2, [r3, #28]
      break;
 8004ac4:	e021      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 faa9 	bl	8005024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69d9      	ldr	r1, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	61da      	str	r2, [r3, #28]
      break;
 8004b06:	e000      	b.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIM_ConfigClockSource+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e0b3      	b.n	8004c9c <HAL_TIM_ConfigClockSource+0x180>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6c:	d03e      	beq.n	8004bec <HAL_TIM_ConfigClockSource+0xd0>
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	f200 8087 	bhi.w	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	f000 8085 	beq.w	8004c88 <HAL_TIM_ConfigClockSource+0x16c>
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	d87f      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004b84:	2b70      	cmp	r3, #112	; 0x70
 8004b86:	d01a      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0xa2>
 8004b88:	2b70      	cmp	r3, #112	; 0x70
 8004b8a:	d87b      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004b8c:	2b60      	cmp	r3, #96	; 0x60
 8004b8e:	d050      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x116>
 8004b90:	2b60      	cmp	r3, #96	; 0x60
 8004b92:	d877      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004b94:	2b50      	cmp	r3, #80	; 0x50
 8004b96:	d03c      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0xf6>
 8004b98:	2b50      	cmp	r3, #80	; 0x50
 8004b9a:	d873      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d058      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x136>
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d86f      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d064      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x156>
 8004ba8:	2b30      	cmp	r3, #48	; 0x30
 8004baa:	d86b      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d060      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x156>
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d867      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x156>
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d05a      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bbc:	e062      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f000 faee 	bl	80051ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	609a      	str	r2, [r3, #8]
      break;
 8004bea:	e04e      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f000 fad7 	bl	80051ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c0e:	609a      	str	r2, [r3, #8]
      break;
 8004c10:	e03b      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 fa4e 	bl	80050c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2150      	movs	r1, #80	; 0x50
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 faa5 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004c30:	e02b      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6859      	ldr	r1, [r3, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f000 fa6c 	bl	800511c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2160      	movs	r1, #96	; 0x60
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fa95 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004c50:	e01b      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f000 fa2e 	bl	80050c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2140      	movs	r1, #64	; 0x40
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fa85 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004c70:	e00b      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f000 fa7c 	bl	800517a <TIM_ITRx_SetConfig>
        break;
 8004c82:	e002      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c84:	bf00      	nop
 8004c86:	e000      	b.n	8004c8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <TIM_Base_SetConfig+0xb8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <TIM_Base_SetConfig+0xbc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x30>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a25      	ldr	r2, [pc, #148]	; (8004dac <TIM_Base_SetConfig+0xc0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d108      	bne.n	8004d2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1c      	ldr	r2, [pc, #112]	; (8004da4 <TIM_Base_SetConfig+0xb8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <TIM_Base_SetConfig+0xbc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0x62>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a18      	ldr	r2, [pc, #96]	; (8004dac <TIM_Base_SetConfig+0xc0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <TIM_Base_SetConfig+0xb8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800

08004db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 0302 	bic.w	r3, r3, #2
 8004df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <TIM_OC1_SetConfig+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10c      	bne.n	8004e26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0308 	bic.w	r3, r3, #8
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 0304 	bic.w	r3, r3, #4
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <TIM_OC1_SetConfig+0xc8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00

08004e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	f023 0210 	bic.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0320 	bic.w	r3, r3, #32
 8004ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <TIM_OC2_SetConfig+0xd0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10d      	bne.n	8004ef8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <TIM_OC2_SetConfig+0xd0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d113      	bne.n	8004f28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	621a      	str	r2, [r3, #32]
}
 8004f42:	bf00      	nop
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40012c00 	.word	0x40012c00

08004f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <TIM_OC3_SetConfig+0xd0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10d      	bne.n	8004fca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a14      	ldr	r2, [pc, #80]	; (8005020 <TIM_OC3_SetConfig+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d113      	bne.n	8004ffa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40012c00 	.word	0x40012c00

08005024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800506e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	031b      	lsls	r3, r3, #12
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a0f      	ldr	r2, [pc, #60]	; (80050bc <TIM_OC4_SetConfig+0x98>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d109      	bne.n	8005098 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800508a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00

080050c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0201 	bic.w	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f023 030a 	bic.w	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 0210 	bic.w	r2, r3, #16
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	031b      	lsls	r3, r3, #12
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	f043 0307 	orr.w	r3, r3, #7
 800519c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	021a      	lsls	r2, r3, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	609a      	str	r2, [r3, #8]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e046      	b.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d009      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d10c      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	4313      	orrs	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr

080052cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052cc:	b084      	sub	sp, #16
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	f107 0014 	add.w	r0, r7, #20
 80052da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	b004      	add	sp, #16
 80052ea:	4770      	bx	lr

080052ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	b29b      	uxth	r3, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	b29b      	uxth	r3, r3
 800530a:	4013      	ands	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005338:	b084      	sub	sp, #16
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	f107 0014 	add.w	r0, r7, #20
 8005346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	b004      	add	sp, #16
 8005376:	4770      	bx	lr

08005378 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <__errno>:
 800538c:	4b01      	ldr	r3, [pc, #4]	; (8005394 <__errno+0x8>)
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010

08005398 <__libc_init_array>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	2600      	movs	r6, #0
 800539c:	4d0c      	ldr	r5, [pc, #48]	; (80053d0 <__libc_init_array+0x38>)
 800539e:	4c0d      	ldr	r4, [pc, #52]	; (80053d4 <__libc_init_array+0x3c>)
 80053a0:	1b64      	subs	r4, r4, r5
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	42a6      	cmp	r6, r4
 80053a6:	d109      	bne.n	80053bc <__libc_init_array+0x24>
 80053a8:	f001 fb28 	bl	80069fc <_init>
 80053ac:	2600      	movs	r6, #0
 80053ae:	4d0a      	ldr	r5, [pc, #40]	; (80053d8 <__libc_init_array+0x40>)
 80053b0:	4c0a      	ldr	r4, [pc, #40]	; (80053dc <__libc_init_array+0x44>)
 80053b2:	1b64      	subs	r4, r4, r5
 80053b4:	10a4      	asrs	r4, r4, #2
 80053b6:	42a6      	cmp	r6, r4
 80053b8:	d105      	bne.n	80053c6 <__libc_init_array+0x2e>
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c0:	4798      	blx	r3
 80053c2:	3601      	adds	r6, #1
 80053c4:	e7ee      	b.n	80053a4 <__libc_init_array+0xc>
 80053c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ca:	4798      	blx	r3
 80053cc:	3601      	adds	r6, #1
 80053ce:	e7f2      	b.n	80053b6 <__libc_init_array+0x1e>
 80053d0:	08006c20 	.word	0x08006c20
 80053d4:	08006c20 	.word	0x08006c20
 80053d8:	08006c20 	.word	0x08006c20
 80053dc:	08006c24 	.word	0x08006c24

080053e0 <memcpy>:
 80053e0:	440a      	add	r2, r1
 80053e2:	4291      	cmp	r1, r2
 80053e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e8:	d100      	bne.n	80053ec <memcpy+0xc>
 80053ea:	4770      	bx	lr
 80053ec:	b510      	push	{r4, lr}
 80053ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f8:	d1f9      	bne.n	80053ee <memcpy+0xe>
 80053fa:	bd10      	pop	{r4, pc}

080053fc <memset>:
 80053fc:	4603      	mov	r3, r0
 80053fe:	4402      	add	r2, r0
 8005400:	4293      	cmp	r3, r2
 8005402:	d100      	bne.n	8005406 <memset+0xa>
 8005404:	4770      	bx	lr
 8005406:	f803 1b01 	strb.w	r1, [r3], #1
 800540a:	e7f9      	b.n	8005400 <memset+0x4>

0800540c <sin>:
 800540c:	b530      	push	{r4, r5, lr}
 800540e:	4a20      	ldr	r2, [pc, #128]	; (8005490 <sin+0x84>)
 8005410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005414:	4293      	cmp	r3, r2
 8005416:	b087      	sub	sp, #28
 8005418:	dc06      	bgt.n	8005428 <sin+0x1c>
 800541a:	2300      	movs	r3, #0
 800541c:	2200      	movs	r2, #0
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	2300      	movs	r3, #0
 8005422:	f001 f929 	bl	8006678 <__kernel_sin>
 8005426:	e006      	b.n	8005436 <sin+0x2a>
 8005428:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <sin+0x88>)
 800542a:	4293      	cmp	r3, r2
 800542c:	dd05      	ble.n	800543a <sin+0x2e>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	f7fa fe91 	bl	8000158 <__aeabi_dsub>
 8005436:	b007      	add	sp, #28
 8005438:	bd30      	pop	{r4, r5, pc}
 800543a:	aa02      	add	r2, sp, #8
 800543c:	f000 fa74 	bl	8005928 <__ieee754_rem_pio2>
 8005440:	f000 0003 	and.w	r0, r0, #3
 8005444:	2801      	cmp	r0, #1
 8005446:	d009      	beq.n	800545c <sin+0x50>
 8005448:	2802      	cmp	r0, #2
 800544a:	d00e      	beq.n	800546a <sin+0x5e>
 800544c:	b9c0      	cbnz	r0, 8005480 <sin+0x74>
 800544e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005452:	2301      	movs	r3, #1
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545a:	e7e2      	b.n	8005422 <sin+0x16>
 800545c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005464:	f000 fd08 	bl	8005e78 <__kernel_cos>
 8005468:	e7e5      	b.n	8005436 <sin+0x2a>
 800546a:	2301      	movs	r3, #1
 800546c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005476:	f001 f8ff 	bl	8006678 <__kernel_sin>
 800547a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800547e:	e7da      	b.n	8005436 <sin+0x2a>
 8005480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005488:	f000 fcf6 	bl	8005e78 <__kernel_cos>
 800548c:	e7f5      	b.n	800547a <sin+0x6e>
 800548e:	bf00      	nop
 8005490:	3fe921fb 	.word	0x3fe921fb
 8005494:	7fefffff 	.word	0x7fefffff

08005498 <asin>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	4604      	mov	r4, r0
 800549c:	460d      	mov	r5, r1
 800549e:	f000 f847 	bl	8005530 <__ieee754_asin>
 80054a2:	4622      	mov	r2, r4
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	462b      	mov	r3, r5
 80054aa:	4620      	mov	r0, r4
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7fb faa5 	bl	80009fc <__aeabi_dcmpun>
 80054b2:	b988      	cbnz	r0, 80054d8 <asin+0x40>
 80054b4:	4620      	mov	r0, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	f001 f994 	bl	80067e4 <fabs>
 80054bc:	2200      	movs	r2, #0
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <asin+0x48>)
 80054c0:	f7fb fa92 	bl	80009e8 <__aeabi_dcmpgt>
 80054c4:	b140      	cbz	r0, 80054d8 <asin+0x40>
 80054c6:	f7ff ff61 	bl	800538c <__errno>
 80054ca:	2321      	movs	r3, #33	; 0x21
 80054cc:	6003      	str	r3, [r0, #0]
 80054ce:	4805      	ldr	r0, [pc, #20]	; (80054e4 <asin+0x4c>)
 80054d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054d4:	f001 ba0c 	b.w	80068f0 <nan>
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054de:	bf00      	nop
 80054e0:	3ff00000 	.word	0x3ff00000
 80054e4:	08006a40 	.word	0x08006a40

080054e8 <sqrt>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	f000 fc13 	bl	8005d18 <__ieee754_sqrt>
 80054f2:	4632      	mov	r2, r6
 80054f4:	4604      	mov	r4, r0
 80054f6:	460d      	mov	r5, r1
 80054f8:	463b      	mov	r3, r7
 80054fa:	4630      	mov	r0, r6
 80054fc:	4639      	mov	r1, r7
 80054fe:	f7fb fa7d 	bl	80009fc <__aeabi_dcmpun>
 8005502:	b990      	cbnz	r0, 800552a <sqrt+0x42>
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	4630      	mov	r0, r6
 800550a:	4639      	mov	r1, r7
 800550c:	f7fb fa4e 	bl	80009ac <__aeabi_dcmplt>
 8005510:	b158      	cbz	r0, 800552a <sqrt+0x42>
 8005512:	f7ff ff3b 	bl	800538c <__errno>
 8005516:	2321      	movs	r3, #33	; 0x21
 8005518:	2200      	movs	r2, #0
 800551a:	6003      	str	r3, [r0, #0]
 800551c:	2300      	movs	r3, #0
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	f7fb f8fb 	bl	800071c <__aeabi_ddiv>
 8005526:	4604      	mov	r4, r0
 8005528:	460d      	mov	r5, r1
 800552a:	4620      	mov	r0, r4
 800552c:	4629      	mov	r1, r5
 800552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005530 <__ieee754_asin>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	4bc4      	ldr	r3, [pc, #784]	; (8005848 <__ieee754_asin+0x318>)
 8005536:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800553a:	b087      	sub	sp, #28
 800553c:	429e      	cmp	r6, r3
 800553e:	4602      	mov	r2, r0
 8005540:	4604      	mov	r4, r0
 8005542:	460d      	mov	r5, r1
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	dd29      	ble.n	800559c <__ieee754_asin+0x6c>
 8005548:	4603      	mov	r3, r0
 800554a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800554e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005552:	4333      	orrs	r3, r6
 8005554:	d114      	bne.n	8005580 <__ieee754_asin+0x50>
 8005556:	a3a2      	add	r3, pc, #648	; (adr r3, 80057e0 <__ieee754_asin+0x2b0>)
 8005558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555c:	f7fa ffb4 	bl	80004c8 <__aeabi_dmul>
 8005560:	a3a1      	add	r3, pc, #644	; (adr r3, 80057e8 <__ieee754_asin+0x2b8>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	4606      	mov	r6, r0
 8005568:	460f      	mov	r7, r1
 800556a:	4620      	mov	r0, r4
 800556c:	4629      	mov	r1, r5
 800556e:	f7fa ffab 	bl	80004c8 <__aeabi_dmul>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	f7fa fdef 	bl	800015c <__adddf3>
 800557e:	e006      	b.n	800558e <__ieee754_asin+0x5e>
 8005580:	460b      	mov	r3, r1
 8005582:	f7fa fde9 	bl	8000158 <__aeabi_dsub>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	f7fb f8c7 	bl	800071c <__aeabi_ddiv>
 800558e:	4604      	mov	r4, r0
 8005590:	460d      	mov	r5, r1
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	b007      	add	sp, #28
 8005598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	4bab      	ldr	r3, [pc, #684]	; (800584c <__ieee754_asin+0x31c>)
 800559e:	429e      	cmp	r6, r3
 80055a0:	dc0e      	bgt.n	80055c0 <__ieee754_asin+0x90>
 80055a2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80055a6:	f280 80ab 	bge.w	8005700 <__ieee754_asin+0x1d0>
 80055aa:	a391      	add	r3, pc, #580	; (adr r3, 80057f0 <__ieee754_asin+0x2c0>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa fdd4 	bl	800015c <__adddf3>
 80055b4:	2200      	movs	r2, #0
 80055b6:	4ba6      	ldr	r3, [pc, #664]	; (8005850 <__ieee754_asin+0x320>)
 80055b8:	f7fb fa16 	bl	80009e8 <__aeabi_dcmpgt>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1e8      	bne.n	8005592 <__ieee754_asin+0x62>
 80055c0:	4620      	mov	r0, r4
 80055c2:	4629      	mov	r1, r5
 80055c4:	f001 f90e 	bl	80067e4 <fabs>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	2000      	movs	r0, #0
 80055ce:	49a0      	ldr	r1, [pc, #640]	; (8005850 <__ieee754_asin+0x320>)
 80055d0:	f7fa fdc2 	bl	8000158 <__aeabi_dsub>
 80055d4:	2200      	movs	r2, #0
 80055d6:	4b9f      	ldr	r3, [pc, #636]	; (8005854 <__ieee754_asin+0x324>)
 80055d8:	f7fa ff76 	bl	80004c8 <__aeabi_dmul>
 80055dc:	a386      	add	r3, pc, #536	; (adr r3, 80057f8 <__ieee754_asin+0x2c8>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	4604      	mov	r4, r0
 80055e4:	460d      	mov	r5, r1
 80055e6:	f7fa ff6f 	bl	80004c8 <__aeabi_dmul>
 80055ea:	a385      	add	r3, pc, #532	; (adr r3, 8005800 <__ieee754_asin+0x2d0>)
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f7fa fdb4 	bl	800015c <__adddf3>
 80055f4:	4622      	mov	r2, r4
 80055f6:	462b      	mov	r3, r5
 80055f8:	f7fa ff66 	bl	80004c8 <__aeabi_dmul>
 80055fc:	a382      	add	r3, pc, #520	; (adr r3, 8005808 <__ieee754_asin+0x2d8>)
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f7fa fda9 	bl	8000158 <__aeabi_dsub>
 8005606:	4622      	mov	r2, r4
 8005608:	462b      	mov	r3, r5
 800560a:	f7fa ff5d 	bl	80004c8 <__aeabi_dmul>
 800560e:	a380      	add	r3, pc, #512	; (adr r3, 8005810 <__ieee754_asin+0x2e0>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa fda2 	bl	800015c <__adddf3>
 8005618:	4622      	mov	r2, r4
 800561a:	462b      	mov	r3, r5
 800561c:	f7fa ff54 	bl	80004c8 <__aeabi_dmul>
 8005620:	a37d      	add	r3, pc, #500	; (adr r3, 8005818 <__ieee754_asin+0x2e8>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa fd97 	bl	8000158 <__aeabi_dsub>
 800562a:	4622      	mov	r2, r4
 800562c:	462b      	mov	r3, r5
 800562e:	f7fa ff4b 	bl	80004c8 <__aeabi_dmul>
 8005632:	a37b      	add	r3, pc, #492	; (adr r3, 8005820 <__ieee754_asin+0x2f0>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fd90 	bl	800015c <__adddf3>
 800563c:	4622      	mov	r2, r4
 800563e:	462b      	mov	r3, r5
 8005640:	f7fa ff42 	bl	80004c8 <__aeabi_dmul>
 8005644:	a378      	add	r3, pc, #480	; (adr r3, 8005828 <__ieee754_asin+0x2f8>)
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	e9cd 0100 	strd	r0, r1, [sp]
 800564e:	4620      	mov	r0, r4
 8005650:	4629      	mov	r1, r5
 8005652:	f7fa ff39 	bl	80004c8 <__aeabi_dmul>
 8005656:	a376      	add	r3, pc, #472	; (adr r3, 8005830 <__ieee754_asin+0x300>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f7fa fd7c 	bl	8000158 <__aeabi_dsub>
 8005660:	4622      	mov	r2, r4
 8005662:	462b      	mov	r3, r5
 8005664:	f7fa ff30 	bl	80004c8 <__aeabi_dmul>
 8005668:	a373      	add	r3, pc, #460	; (adr r3, 8005838 <__ieee754_asin+0x308>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fd75 	bl	800015c <__adddf3>
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	f7fa ff27 	bl	80004c8 <__aeabi_dmul>
 800567a:	a371      	add	r3, pc, #452	; (adr r3, 8005840 <__ieee754_asin+0x310>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fd6a 	bl	8000158 <__aeabi_dsub>
 8005684:	4622      	mov	r2, r4
 8005686:	462b      	mov	r3, r5
 8005688:	f7fa ff1e 	bl	80004c8 <__aeabi_dmul>
 800568c:	4b70      	ldr	r3, [pc, #448]	; (8005850 <__ieee754_asin+0x320>)
 800568e:	2200      	movs	r2, #0
 8005690:	f7fa fd64 	bl	800015c <__adddf3>
 8005694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f000 fb3c 	bl	8005d18 <__ieee754_sqrt>
 80056a0:	4b6d      	ldr	r3, [pc, #436]	; (8005858 <__ieee754_asin+0x328>)
 80056a2:	4682      	mov	sl, r0
 80056a4:	429e      	cmp	r6, r3
 80056a6:	468b      	mov	fp, r1
 80056a8:	f340 80d8 	ble.w	800585c <__ieee754_asin+0x32c>
 80056ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b4:	f7fb f832 	bl	800071c <__aeabi_ddiv>
 80056b8:	4652      	mov	r2, sl
 80056ba:	465b      	mov	r3, fp
 80056bc:	f7fa ff04 	bl	80004c8 <__aeabi_dmul>
 80056c0:	4652      	mov	r2, sl
 80056c2:	465b      	mov	r3, fp
 80056c4:	f7fa fd4a 	bl	800015c <__adddf3>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	f7fa fd46 	bl	800015c <__adddf3>
 80056d0:	a345      	add	r3, pc, #276	; (adr r3, 80057e8 <__ieee754_asin+0x2b8>)
 80056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d6:	f7fa fd3f 	bl	8000158 <__aeabi_dsub>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	a140      	add	r1, pc, #256	; (adr r1, 80057e0 <__ieee754_asin+0x2b0>)
 80056e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056e4:	f7fa fd38 	bl	8000158 <__aeabi_dsub>
 80056e8:	9b05      	ldr	r3, [sp, #20]
 80056ea:	4604      	mov	r4, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfdc      	itt	le
 80056f0:	4602      	movle	r2, r0
 80056f2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80056f6:	460d      	mov	r5, r1
 80056f8:	bfdc      	itt	le
 80056fa:	4614      	movle	r4, r2
 80056fc:	461d      	movle	r5, r3
 80056fe:	e748      	b.n	8005592 <__ieee754_asin+0x62>
 8005700:	460b      	mov	r3, r1
 8005702:	f7fa fee1 	bl	80004c8 <__aeabi_dmul>
 8005706:	a33c      	add	r3, pc, #240	; (adr r3, 80057f8 <__ieee754_asin+0x2c8>)
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	f7fa feda 	bl	80004c8 <__aeabi_dmul>
 8005714:	a33a      	add	r3, pc, #232	; (adr r3, 8005800 <__ieee754_asin+0x2d0>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	f7fa fd1f 	bl	800015c <__adddf3>
 800571e:	4632      	mov	r2, r6
 8005720:	463b      	mov	r3, r7
 8005722:	f7fa fed1 	bl	80004c8 <__aeabi_dmul>
 8005726:	a338      	add	r3, pc, #224	; (adr r3, 8005808 <__ieee754_asin+0x2d8>)
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f7fa fd14 	bl	8000158 <__aeabi_dsub>
 8005730:	4632      	mov	r2, r6
 8005732:	463b      	mov	r3, r7
 8005734:	f7fa fec8 	bl	80004c8 <__aeabi_dmul>
 8005738:	a335      	add	r3, pc, #212	; (adr r3, 8005810 <__ieee754_asin+0x2e0>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa fd0d 	bl	800015c <__adddf3>
 8005742:	4632      	mov	r2, r6
 8005744:	463b      	mov	r3, r7
 8005746:	f7fa febf 	bl	80004c8 <__aeabi_dmul>
 800574a:	a333      	add	r3, pc, #204	; (adr r3, 8005818 <__ieee754_asin+0x2e8>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa fd02 	bl	8000158 <__aeabi_dsub>
 8005754:	4632      	mov	r2, r6
 8005756:	463b      	mov	r3, r7
 8005758:	f7fa feb6 	bl	80004c8 <__aeabi_dmul>
 800575c:	a330      	add	r3, pc, #192	; (adr r3, 8005820 <__ieee754_asin+0x2f0>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f7fa fcfb 	bl	800015c <__adddf3>
 8005766:	4632      	mov	r2, r6
 8005768:	463b      	mov	r3, r7
 800576a:	f7fa fead 	bl	80004c8 <__aeabi_dmul>
 800576e:	a32e      	add	r3, pc, #184	; (adr r3, 8005828 <__ieee754_asin+0x2f8>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	4680      	mov	r8, r0
 8005776:	4689      	mov	r9, r1
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fa fea4 	bl	80004c8 <__aeabi_dmul>
 8005780:	a32b      	add	r3, pc, #172	; (adr r3, 8005830 <__ieee754_asin+0x300>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa fce7 	bl	8000158 <__aeabi_dsub>
 800578a:	4632      	mov	r2, r6
 800578c:	463b      	mov	r3, r7
 800578e:	f7fa fe9b 	bl	80004c8 <__aeabi_dmul>
 8005792:	a329      	add	r3, pc, #164	; (adr r3, 8005838 <__ieee754_asin+0x308>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fa fce0 	bl	800015c <__adddf3>
 800579c:	4632      	mov	r2, r6
 800579e:	463b      	mov	r3, r7
 80057a0:	f7fa fe92 	bl	80004c8 <__aeabi_dmul>
 80057a4:	a326      	add	r3, pc, #152	; (adr r3, 8005840 <__ieee754_asin+0x310>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f7fa fcd5 	bl	8000158 <__aeabi_dsub>
 80057ae:	4632      	mov	r2, r6
 80057b0:	463b      	mov	r3, r7
 80057b2:	f7fa fe89 	bl	80004c8 <__aeabi_dmul>
 80057b6:	2200      	movs	r2, #0
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <__ieee754_asin+0x320>)
 80057ba:	f7fa fccf 	bl	800015c <__adddf3>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4640      	mov	r0, r8
 80057c4:	4649      	mov	r1, r9
 80057c6:	f7fa ffa9 	bl	800071c <__aeabi_ddiv>
 80057ca:	4622      	mov	r2, r4
 80057cc:	462b      	mov	r3, r5
 80057ce:	f7fa fe7b 	bl	80004c8 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4620      	mov	r0, r4
 80057d8:	4629      	mov	r1, r5
 80057da:	e6ce      	b.n	800557a <__ieee754_asin+0x4a>
 80057dc:	f3af 8000 	nop.w
 80057e0:	54442d18 	.word	0x54442d18
 80057e4:	3ff921fb 	.word	0x3ff921fb
 80057e8:	33145c07 	.word	0x33145c07
 80057ec:	3c91a626 	.word	0x3c91a626
 80057f0:	8800759c 	.word	0x8800759c
 80057f4:	7e37e43c 	.word	0x7e37e43c
 80057f8:	0dfdf709 	.word	0x0dfdf709
 80057fc:	3f023de1 	.word	0x3f023de1
 8005800:	7501b288 	.word	0x7501b288
 8005804:	3f49efe0 	.word	0x3f49efe0
 8005808:	b5688f3b 	.word	0xb5688f3b
 800580c:	3fa48228 	.word	0x3fa48228
 8005810:	0e884455 	.word	0x0e884455
 8005814:	3fc9c155 	.word	0x3fc9c155
 8005818:	03eb6f7d 	.word	0x03eb6f7d
 800581c:	3fd4d612 	.word	0x3fd4d612
 8005820:	55555555 	.word	0x55555555
 8005824:	3fc55555 	.word	0x3fc55555
 8005828:	b12e9282 	.word	0xb12e9282
 800582c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005830:	1b8d0159 	.word	0x1b8d0159
 8005834:	3fe6066c 	.word	0x3fe6066c
 8005838:	9c598ac8 	.word	0x9c598ac8
 800583c:	40002ae5 	.word	0x40002ae5
 8005840:	1c8a2d4b 	.word	0x1c8a2d4b
 8005844:	40033a27 	.word	0x40033a27
 8005848:	3fefffff 	.word	0x3fefffff
 800584c:	3fdfffff 	.word	0x3fdfffff
 8005850:	3ff00000 	.word	0x3ff00000
 8005854:	3fe00000 	.word	0x3fe00000
 8005858:	3fef3332 	.word	0x3fef3332
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	f7fa fc7c 	bl	800015c <__adddf3>
 8005864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005870:	f7fa ff54 	bl	800071c <__aeabi_ddiv>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fa fe24 	bl	80004c8 <__aeabi_dmul>
 8005880:	f04f 0800 	mov.w	r8, #0
 8005884:	4606      	mov	r6, r0
 8005886:	460f      	mov	r7, r1
 8005888:	4642      	mov	r2, r8
 800588a:	465b      	mov	r3, fp
 800588c:	4640      	mov	r0, r8
 800588e:	4659      	mov	r1, fp
 8005890:	f7fa fe1a 	bl	80004c8 <__aeabi_dmul>
 8005894:	4602      	mov	r2, r0
 8005896:	460b      	mov	r3, r1
 8005898:	4620      	mov	r0, r4
 800589a:	4629      	mov	r1, r5
 800589c:	f7fa fc5c 	bl	8000158 <__aeabi_dsub>
 80058a0:	4642      	mov	r2, r8
 80058a2:	4604      	mov	r4, r0
 80058a4:	460d      	mov	r5, r1
 80058a6:	465b      	mov	r3, fp
 80058a8:	4650      	mov	r0, sl
 80058aa:	4659      	mov	r1, fp
 80058ac:	f7fa fc56 	bl	800015c <__adddf3>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa ff30 	bl	800071c <__aeabi_ddiv>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	f7fa fc4c 	bl	800015c <__adddf3>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	a113      	add	r1, pc, #76	; (adr r1, 8005918 <__ieee754_asin+0x3e8>)
 80058ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ce:	f7fa fc43 	bl	8000158 <__aeabi_dsub>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4630      	mov	r0, r6
 80058d8:	4639      	mov	r1, r7
 80058da:	f7fa fc3d 	bl	8000158 <__aeabi_dsub>
 80058de:	4642      	mov	r2, r8
 80058e0:	4604      	mov	r4, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	465b      	mov	r3, fp
 80058e6:	4640      	mov	r0, r8
 80058e8:	4659      	mov	r1, fp
 80058ea:	f7fa fc37 	bl	800015c <__adddf3>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	a10b      	add	r1, pc, #44	; (adr r1, 8005920 <__ieee754_asin+0x3f0>)
 80058f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f8:	f7fa fc2e 	bl	8000158 <__aeabi_dsub>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4620      	mov	r0, r4
 8005902:	4629      	mov	r1, r5
 8005904:	f7fa fc28 	bl	8000158 <__aeabi_dsub>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	a104      	add	r1, pc, #16	; (adr r1, 8005920 <__ieee754_asin+0x3f0>)
 800590e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005912:	e6e7      	b.n	80056e4 <__ieee754_asin+0x1b4>
 8005914:	f3af 8000 	nop.w
 8005918:	33145c07 	.word	0x33145c07
 800591c:	3c91a626 	.word	0x3c91a626
 8005920:	54442d18 	.word	0x54442d18
 8005924:	3fe921fb 	.word	0x3fe921fb

08005928 <__ieee754_rem_pio2>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	4614      	mov	r4, r2
 800592e:	4ac4      	ldr	r2, [pc, #784]	; (8005c40 <__ieee754_rem_pio2+0x318>)
 8005930:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005934:	b08d      	sub	sp, #52	; 0x34
 8005936:	4592      	cmp	sl, r2
 8005938:	9104      	str	r1, [sp, #16]
 800593a:	dc07      	bgt.n	800594c <__ieee754_rem_pio2+0x24>
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	e9c4 0100 	strd	r0, r1, [r4]
 8005944:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005948:	2500      	movs	r5, #0
 800594a:	e024      	b.n	8005996 <__ieee754_rem_pio2+0x6e>
 800594c:	4abd      	ldr	r2, [pc, #756]	; (8005c44 <__ieee754_rem_pio2+0x31c>)
 800594e:	4592      	cmp	sl, r2
 8005950:	dc72      	bgt.n	8005a38 <__ieee754_rem_pio2+0x110>
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	4dbc      	ldr	r5, [pc, #752]	; (8005c48 <__ieee754_rem_pio2+0x320>)
 8005956:	2b00      	cmp	r3, #0
 8005958:	a3ab      	add	r3, pc, #684	; (adr r3, 8005c08 <__ieee754_rem_pio2+0x2e0>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	dd36      	ble.n	80059ce <__ieee754_rem_pio2+0xa6>
 8005960:	f7fa fbfa 	bl	8000158 <__aeabi_dsub>
 8005964:	45aa      	cmp	sl, r5
 8005966:	4606      	mov	r6, r0
 8005968:	460f      	mov	r7, r1
 800596a:	d018      	beq.n	800599e <__ieee754_rem_pio2+0x76>
 800596c:	a3a8      	add	r3, pc, #672	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x2e8>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fbf1 	bl	8000158 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4630      	mov	r0, r6
 800597c:	e9c4 2300 	strd	r2, r3, [r4]
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa fbe9 	bl	8000158 <__aeabi_dsub>
 8005986:	a3a2      	add	r3, pc, #648	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x2e8>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fbe4 	bl	8000158 <__aeabi_dsub>
 8005990:	2501      	movs	r5, #1
 8005992:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005996:	4628      	mov	r0, r5
 8005998:	b00d      	add	sp, #52	; 0x34
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	a39e      	add	r3, pc, #632	; (adr r3, 8005c18 <__ieee754_rem_pio2+0x2f0>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fbd8 	bl	8000158 <__aeabi_dsub>
 80059a8:	a39d      	add	r3, pc, #628	; (adr r3, 8005c20 <__ieee754_rem_pio2+0x2f8>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	4606      	mov	r6, r0
 80059b0:	460f      	mov	r7, r1
 80059b2:	f7fa fbd1 	bl	8000158 <__aeabi_dsub>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4630      	mov	r0, r6
 80059bc:	e9c4 2300 	strd	r2, r3, [r4]
 80059c0:	4639      	mov	r1, r7
 80059c2:	f7fa fbc9 	bl	8000158 <__aeabi_dsub>
 80059c6:	a396      	add	r3, pc, #600	; (adr r3, 8005c20 <__ieee754_rem_pio2+0x2f8>)
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	e7de      	b.n	800598c <__ieee754_rem_pio2+0x64>
 80059ce:	f7fa fbc5 	bl	800015c <__adddf3>
 80059d2:	45aa      	cmp	sl, r5
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	d016      	beq.n	8005a08 <__ieee754_rem_pio2+0xe0>
 80059da:	a38d      	add	r3, pc, #564	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x2e8>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fbbc 	bl	800015c <__adddf3>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	e9c4 2300 	strd	r2, r3, [r4]
 80059ee:	4639      	mov	r1, r7
 80059f0:	f7fa fbb2 	bl	8000158 <__aeabi_dsub>
 80059f4:	a386      	add	r3, pc, #536	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x2e8>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fbaf 	bl	800015c <__adddf3>
 80059fe:	f04f 35ff 	mov.w	r5, #4294967295
 8005a02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a06:	e7c6      	b.n	8005996 <__ieee754_rem_pio2+0x6e>
 8005a08:	a383      	add	r3, pc, #524	; (adr r3, 8005c18 <__ieee754_rem_pio2+0x2f0>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fba5 	bl	800015c <__adddf3>
 8005a12:	a383      	add	r3, pc, #524	; (adr r3, 8005c20 <__ieee754_rem_pio2+0x2f8>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460f      	mov	r7, r1
 8005a1c:	f7fa fb9e 	bl	800015c <__adddf3>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4630      	mov	r0, r6
 8005a26:	e9c4 2300 	strd	r2, r3, [r4]
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa fb94 	bl	8000158 <__aeabi_dsub>
 8005a30:	a37b      	add	r3, pc, #492	; (adr r3, 8005c20 <__ieee754_rem_pio2+0x2f8>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	e7e0      	b.n	80059fa <__ieee754_rem_pio2+0xd2>
 8005a38:	4a84      	ldr	r2, [pc, #528]	; (8005c4c <__ieee754_rem_pio2+0x324>)
 8005a3a:	4592      	cmp	sl, r2
 8005a3c:	f300 80d5 	bgt.w	8005bea <__ieee754_rem_pio2+0x2c2>
 8005a40:	f000 fed0 	bl	80067e4 <fabs>
 8005a44:	a378      	add	r3, pc, #480	; (adr r3, 8005c28 <__ieee754_rem_pio2+0x300>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	f7fa fd3b 	bl	80004c8 <__aeabi_dmul>
 8005a52:	2200      	movs	r2, #0
 8005a54:	4b7e      	ldr	r3, [pc, #504]	; (8005c50 <__ieee754_rem_pio2+0x328>)
 8005a56:	f7fa fb81 	bl	800015c <__adddf3>
 8005a5a:	f7fa ffe5 	bl	8000a28 <__aeabi_d2iz>
 8005a5e:	4605      	mov	r5, r0
 8005a60:	f7fa fcc8 	bl	80003f4 <__aeabi_i2d>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a6c:	a366      	add	r3, pc, #408	; (adr r3, 8005c08 <__ieee754_rem_pio2+0x2e0>)
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f7fa fd29 	bl	80004c8 <__aeabi_dmul>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	f7fa fb6b 	bl	8000158 <__aeabi_dsub>
 8005a82:	a363      	add	r3, pc, #396	; (adr r3, 8005c10 <__ieee754_rem_pio2+0x2e8>)
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a90:	f7fa fd1a 	bl	80004c8 <__aeabi_dmul>
 8005a94:	2d1f      	cmp	r5, #31
 8005a96:	4606      	mov	r6, r0
 8005a98:	460f      	mov	r7, r1
 8005a9a:	dc0e      	bgt.n	8005aba <__ieee754_rem_pio2+0x192>
 8005a9c:	4b6d      	ldr	r3, [pc, #436]	; (8005c54 <__ieee754_rem_pio2+0x32c>)
 8005a9e:	1e6a      	subs	r2, r5, #1
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	4553      	cmp	r3, sl
 8005aa6:	d008      	beq.n	8005aba <__ieee754_rem_pio2+0x192>
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	463b      	mov	r3, r7
 8005aac:	4640      	mov	r0, r8
 8005aae:	4649      	mov	r1, r9
 8005ab0:	f7fa fb52 	bl	8000158 <__aeabi_dsub>
 8005ab4:	e9c4 0100 	strd	r0, r1, [r4]
 8005ab8:	e013      	b.n	8005ae2 <__ieee754_rem_pio2+0x1ba>
 8005aba:	463b      	mov	r3, r7
 8005abc:	4632      	mov	r2, r6
 8005abe:	4640      	mov	r0, r8
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	f7fa fb49 	bl	8000158 <__aeabi_dsub>
 8005ac6:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005aca:	9305      	str	r3, [sp, #20]
 8005acc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ad0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8005ad4:	f1ba 0f10 	cmp.w	sl, #16
 8005ad8:	dc1f      	bgt.n	8005b1a <__ieee754_rem_pio2+0x1f2>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	e9c4 2300 	strd	r2, r3, [r4]
 8005ae2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4653      	mov	r3, sl
 8005aea:	4649      	mov	r1, r9
 8005aec:	f7fa fb34 	bl	8000158 <__aeabi_dsub>
 8005af0:	4632      	mov	r2, r6
 8005af2:	463b      	mov	r3, r7
 8005af4:	f7fa fb30 	bl	8000158 <__aeabi_dsub>
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005afe:	9904      	ldr	r1, [sp, #16]
 8005b00:	4602      	mov	r2, r0
 8005b02:	2900      	cmp	r1, #0
 8005b04:	f6bf af47 	bge.w	8005996 <__ieee754_rem_pio2+0x6e>
 8005b08:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8005b0c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8005b10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	60e3      	str	r3, [r4, #12]
 8005b16:	426d      	negs	r5, r5
 8005b18:	e73d      	b.n	8005996 <__ieee754_rem_pio2+0x6e>
 8005b1a:	a33f      	add	r3, pc, #252	; (adr r3, 8005c18 <__ieee754_rem_pio2+0x2f0>)
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b24:	f7fa fcd0 	bl	80004c8 <__aeabi_dmul>
 8005b28:	4606      	mov	r6, r0
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4640      	mov	r0, r8
 8005b32:	4649      	mov	r1, r9
 8005b34:	f7fa fb10 	bl	8000158 <__aeabi_dsub>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4682      	mov	sl, r0
 8005b3e:	468b      	mov	fp, r1
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	f7fa fb08 	bl	8000158 <__aeabi_dsub>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	f7fa fb04 	bl	8000158 <__aeabi_dsub>
 8005b50:	a333      	add	r3, pc, #204	; (adr r3, 8005c20 <__ieee754_rem_pio2+0x2f8>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	4606      	mov	r6, r0
 8005b58:	460f      	mov	r7, r1
 8005b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b5e:	f7fa fcb3 	bl	80004c8 <__aeabi_dmul>
 8005b62:	4632      	mov	r2, r6
 8005b64:	463b      	mov	r3, r7
 8005b66:	f7fa faf7 	bl	8000158 <__aeabi_dsub>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4606      	mov	r6, r0
 8005b70:	460f      	mov	r7, r1
 8005b72:	4650      	mov	r0, sl
 8005b74:	4659      	mov	r1, fp
 8005b76:	f7fa faef 	bl	8000158 <__aeabi_dsub>
 8005b7a:	9a05      	ldr	r2, [sp, #20]
 8005b7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b31      	cmp	r3, #49	; 0x31
 8005b84:	dc06      	bgt.n	8005b94 <__ieee754_rem_pio2+0x26c>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	46d0      	mov	r8, sl
 8005b8c:	46d9      	mov	r9, fp
 8005b8e:	e9c4 2300 	strd	r2, r3, [r4]
 8005b92:	e7a6      	b.n	8005ae2 <__ieee754_rem_pio2+0x1ba>
 8005b94:	a326      	add	r3, pc, #152	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x308>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9e:	f7fa fc93 	bl	80004c8 <__aeabi_dmul>
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4650      	mov	r0, sl
 8005bac:	4659      	mov	r1, fp
 8005bae:	f7fa fad3 	bl	8000158 <__aeabi_dsub>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4650      	mov	r0, sl
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	f7fa facb 	bl	8000158 <__aeabi_dsub>
 8005bc2:	4632      	mov	r2, r6
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	f7fa fac7 	bl	8000158 <__aeabi_dsub>
 8005bca:	a31b      	add	r3, pc, #108	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x310>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	460f      	mov	r7, r1
 8005bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd8:	f7fa fc76 	bl	80004c8 <__aeabi_dmul>
 8005bdc:	4632      	mov	r2, r6
 8005bde:	463b      	mov	r3, r7
 8005be0:	f7fa faba 	bl	8000158 <__aeabi_dsub>
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	e75e      	b.n	8005aa8 <__ieee754_rem_pio2+0x180>
 8005bea:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <__ieee754_rem_pio2+0x330>)
 8005bec:	4592      	cmp	sl, r2
 8005bee:	dd35      	ble.n	8005c5c <__ieee754_rem_pio2+0x334>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	f7fa fab0 	bl	8000158 <__aeabi_dsub>
 8005bf8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bfc:	e9c4 0100 	strd	r0, r1, [r4]
 8005c00:	e6a2      	b.n	8005948 <__ieee754_rem_pio2+0x20>
 8005c02:	bf00      	nop
 8005c04:	f3af 8000 	nop.w
 8005c08:	54400000 	.word	0x54400000
 8005c0c:	3ff921fb 	.word	0x3ff921fb
 8005c10:	1a626331 	.word	0x1a626331
 8005c14:	3dd0b461 	.word	0x3dd0b461
 8005c18:	1a600000 	.word	0x1a600000
 8005c1c:	3dd0b461 	.word	0x3dd0b461
 8005c20:	2e037073 	.word	0x2e037073
 8005c24:	3ba3198a 	.word	0x3ba3198a
 8005c28:	6dc9c883 	.word	0x6dc9c883
 8005c2c:	3fe45f30 	.word	0x3fe45f30
 8005c30:	2e000000 	.word	0x2e000000
 8005c34:	3ba3198a 	.word	0x3ba3198a
 8005c38:	252049c1 	.word	0x252049c1
 8005c3c:	397b839a 	.word	0x397b839a
 8005c40:	3fe921fb 	.word	0x3fe921fb
 8005c44:	4002d97b 	.word	0x4002d97b
 8005c48:	3ff921fb 	.word	0x3ff921fb
 8005c4c:	413921fb 	.word	0x413921fb
 8005c50:	3fe00000 	.word	0x3fe00000
 8005c54:	08006a44 	.word	0x08006a44
 8005c58:	7fefffff 	.word	0x7fefffff
 8005c5c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005c60:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005c64:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005c68:	460f      	mov	r7, r1
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	f7fa fedc 	bl	8000a28 <__aeabi_d2iz>
 8005c70:	f7fa fbc0 	bl	80003f4 <__aeabi_i2d>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4630      	mov	r0, r6
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c80:	f7fa fa6a 	bl	8000158 <__aeabi_dsub>
 8005c84:	2200      	movs	r2, #0
 8005c86:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <__ieee754_rem_pio2+0x3e8>)
 8005c88:	f7fa fc1e 	bl	80004c8 <__aeabi_dmul>
 8005c8c:	460f      	mov	r7, r1
 8005c8e:	4606      	mov	r6, r0
 8005c90:	f7fa feca 	bl	8000a28 <__aeabi_d2iz>
 8005c94:	f7fa fbae 	bl	80003f4 <__aeabi_i2d>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005ca4:	f7fa fa58 	bl	8000158 <__aeabi_dsub>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <__ieee754_rem_pio2+0x3e8>)
 8005cac:	f7fa fc0c 	bl	80004c8 <__aeabi_dmul>
 8005cb0:	f04f 0803 	mov.w	r8, #3
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	2700      	movs	r7, #0
 8005cb8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cbc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	46c2      	mov	sl, r8
 8005cca:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cce:	f7fa fe63 	bl	8000998 <__aeabi_dcmpeq>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1f4      	bne.n	8005cc0 <__ieee754_rem_pio2+0x398>
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <__ieee754_rem_pio2+0x3ec>)
 8005cd8:	462a      	mov	r2, r5
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	2302      	movs	r3, #2
 8005cde:	4621      	mov	r1, r4
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	a806      	add	r0, sp, #24
 8005ce4:	4653      	mov	r3, sl
 8005ce6:	f000 f985 	bl	8005ff4 <__kernel_rem_pio2>
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	4605      	mov	r5, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f6bf ae51 	bge.w	8005996 <__ieee754_rem_pio2+0x6e>
 8005cf4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005cf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8005d00:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d08:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005d0c:	e703      	b.n	8005b16 <__ieee754_rem_pio2+0x1ee>
 8005d0e:	bf00      	nop
 8005d10:	41700000 	.word	0x41700000
 8005d14:	08006ac4 	.word	0x08006ac4

08005d18 <__ieee754_sqrt>:
 8005d18:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005e74 <__ieee754_sqrt+0x15c>
 8005d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d20:	ea3c 0c01 	bics.w	ip, ip, r1
 8005d24:	4606      	mov	r6, r0
 8005d26:	460d      	mov	r5, r1
 8005d28:	460c      	mov	r4, r1
 8005d2a:	460a      	mov	r2, r1
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	d10f      	bne.n	8005d52 <__ieee754_sqrt+0x3a>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	f7fa fbc7 	bl	80004c8 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4630      	mov	r0, r6
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fa0b 	bl	800015c <__adddf3>
 8005d46:	4606      	mov	r6, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d52:	2900      	cmp	r1, #0
 8005d54:	dc0e      	bgt.n	8005d74 <__ieee754_sqrt+0x5c>
 8005d56:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005d5a:	ea5c 0707 	orrs.w	r7, ip, r7
 8005d5e:	d0f4      	beq.n	8005d4a <__ieee754_sqrt+0x32>
 8005d60:	b141      	cbz	r1, 8005d74 <__ieee754_sqrt+0x5c>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	f7fa f9f7 	bl	8000158 <__aeabi_dsub>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	f7fa fcd5 	bl	800071c <__aeabi_ddiv>
 8005d72:	e7e8      	b.n	8005d46 <__ieee754_sqrt+0x2e>
 8005d74:	1521      	asrs	r1, r4, #20
 8005d76:	d075      	beq.n	8005e64 <__ieee754_sqrt+0x14c>
 8005d78:	07cc      	lsls	r4, r1, #31
 8005d7a:	f04f 0400 	mov.w	r4, #0
 8005d7e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005d82:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8005d86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005d8a:	bf5e      	ittt	pl
 8005d8c:	0fd9      	lsrpl	r1, r3, #31
 8005d8e:	005b      	lslpl	r3, r3, #1
 8005d90:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005d94:	0fd9      	lsrs	r1, r3, #31
 8005d96:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005d9a:	2516      	movs	r5, #22
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005da2:	107f      	asrs	r7, r7, #1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	1846      	adds	r6, r0, r1
 8005da8:	4296      	cmp	r6, r2
 8005daa:	bfde      	ittt	le
 8005dac:	1b92      	suble	r2, r2, r6
 8005dae:	1870      	addle	r0, r6, r1
 8005db0:	1864      	addle	r4, r4, r1
 8005db2:	0052      	lsls	r2, r2, #1
 8005db4:	3d01      	subs	r5, #1
 8005db6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005dba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005dbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005dc2:	d1f0      	bne.n	8005da6 <__ieee754_sqrt+0x8e>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f04f 0e20 	mov.w	lr, #32
 8005dca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005dce:	4282      	cmp	r2, r0
 8005dd0:	eb06 0c05 	add.w	ip, r6, r5
 8005dd4:	dc02      	bgt.n	8005ddc <__ieee754_sqrt+0xc4>
 8005dd6:	d113      	bne.n	8005e00 <__ieee754_sqrt+0xe8>
 8005dd8:	459c      	cmp	ip, r3
 8005dda:	d811      	bhi.n	8005e00 <__ieee754_sqrt+0xe8>
 8005ddc:	f1bc 0f00 	cmp.w	ip, #0
 8005de0:	eb0c 0506 	add.w	r5, ip, r6
 8005de4:	da43      	bge.n	8005e6e <__ieee754_sqrt+0x156>
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	db41      	blt.n	8005e6e <__ieee754_sqrt+0x156>
 8005dea:	f100 0801 	add.w	r8, r0, #1
 8005dee:	1a12      	subs	r2, r2, r0
 8005df0:	4640      	mov	r0, r8
 8005df2:	459c      	cmp	ip, r3
 8005df4:	bf88      	it	hi
 8005df6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005dfa:	eba3 030c 	sub.w	r3, r3, ip
 8005dfe:	4431      	add	r1, r6
 8005e00:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005e04:	f1be 0e01 	subs.w	lr, lr, #1
 8005e08:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005e0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005e10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e14:	d1db      	bne.n	8005dce <__ieee754_sqrt+0xb6>
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d006      	beq.n	8005e28 <__ieee754_sqrt+0x110>
 8005e1a:	1c48      	adds	r0, r1, #1
 8005e1c:	bf0b      	itete	eq
 8005e1e:	4671      	moveq	r1, lr
 8005e20:	3101      	addne	r1, #1
 8005e22:	3401      	addeq	r4, #1
 8005e24:	f021 0101 	bicne.w	r1, r1, #1
 8005e28:	1063      	asrs	r3, r4, #1
 8005e2a:	0849      	lsrs	r1, r1, #1
 8005e2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005e30:	07e2      	lsls	r2, r4, #31
 8005e32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005e36:	bf48      	it	mi
 8005e38:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005e3c:	460e      	mov	r6, r1
 8005e3e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005e42:	e782      	b.n	8005d4a <__ieee754_sqrt+0x32>
 8005e44:	0ada      	lsrs	r2, r3, #11
 8005e46:	3815      	subs	r0, #21
 8005e48:	055b      	lsls	r3, r3, #21
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d0fa      	beq.n	8005e44 <__ieee754_sqrt+0x12c>
 8005e4e:	02d5      	lsls	r5, r2, #11
 8005e50:	d50a      	bpl.n	8005e68 <__ieee754_sqrt+0x150>
 8005e52:	f1c1 0420 	rsb	r4, r1, #32
 8005e56:	fa23 f404 	lsr.w	r4, r3, r4
 8005e5a:	1e4d      	subs	r5, r1, #1
 8005e5c:	408b      	lsls	r3, r1
 8005e5e:	4322      	orrs	r2, r4
 8005e60:	1b41      	subs	r1, r0, r5
 8005e62:	e789      	b.n	8005d78 <__ieee754_sqrt+0x60>
 8005e64:	4608      	mov	r0, r1
 8005e66:	e7f0      	b.n	8005e4a <__ieee754_sqrt+0x132>
 8005e68:	0052      	lsls	r2, r2, #1
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	e7ef      	b.n	8005e4e <__ieee754_sqrt+0x136>
 8005e6e:	4680      	mov	r8, r0
 8005e70:	e7bd      	b.n	8005dee <__ieee754_sqrt+0xd6>
 8005e72:	bf00      	nop
 8005e74:	7ff00000 	.word	0x7ff00000

08005e78 <__kernel_cos>:
 8005e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e80:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005e84:	4680      	mov	r8, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	e9cd 2300 	strd	r2, r3, [sp]
 8005e8c:	da04      	bge.n	8005e98 <__kernel_cos+0x20>
 8005e8e:	f7fa fdcb 	bl	8000a28 <__aeabi_d2iz>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f000 8086 	beq.w	8005fa4 <__kernel_cos+0x12c>
 8005e98:	4642      	mov	r2, r8
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa fb12 	bl	80004c8 <__aeabi_dmul>
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4b4e      	ldr	r3, [pc, #312]	; (8005fe0 <__kernel_cos+0x168>)
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	f7fa fb0c 	bl	80004c8 <__aeabi_dmul>
 8005eb0:	a33f      	add	r3, pc, #252	; (adr r3, 8005fb0 <__kernel_cos+0x138>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	4682      	mov	sl, r0
 8005eb8:	468b      	mov	fp, r1
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	f7fa fb03 	bl	80004c8 <__aeabi_dmul>
 8005ec2:	a33d      	add	r3, pc, #244	; (adr r3, 8005fb8 <__kernel_cos+0x140>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa f948 	bl	800015c <__adddf3>
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	f7fa fafa 	bl	80004c8 <__aeabi_dmul>
 8005ed4:	a33a      	add	r3, pc, #232	; (adr r3, 8005fc0 <__kernel_cos+0x148>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa f93d 	bl	8000158 <__aeabi_dsub>
 8005ede:	4622      	mov	r2, r4
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	f7fa faf1 	bl	80004c8 <__aeabi_dmul>
 8005ee6:	a338      	add	r3, pc, #224	; (adr r3, 8005fc8 <__kernel_cos+0x150>)
 8005ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eec:	f7fa f936 	bl	800015c <__adddf3>
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	f7fa fae8 	bl	80004c8 <__aeabi_dmul>
 8005ef8:	a335      	add	r3, pc, #212	; (adr r3, 8005fd0 <__kernel_cos+0x158>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa f92b 	bl	8000158 <__aeabi_dsub>
 8005f02:	4622      	mov	r2, r4
 8005f04:	462b      	mov	r3, r5
 8005f06:	f7fa fadf 	bl	80004c8 <__aeabi_dmul>
 8005f0a:	a333      	add	r3, pc, #204	; (adr r3, 8005fd8 <__kernel_cos+0x160>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f7fa f924 	bl	800015c <__adddf3>
 8005f14:	4622      	mov	r2, r4
 8005f16:	462b      	mov	r3, r5
 8005f18:	f7fa fad6 	bl	80004c8 <__aeabi_dmul>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	462b      	mov	r3, r5
 8005f20:	f7fa fad2 	bl	80004c8 <__aeabi_dmul>
 8005f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f28:	4604      	mov	r4, r0
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7fa faca 	bl	80004c8 <__aeabi_dmul>
 8005f34:	460b      	mov	r3, r1
 8005f36:	4602      	mov	r2, r0
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f7fa f90c 	bl	8000158 <__aeabi_dsub>
 8005f40:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <__kernel_cos+0x16c>)
 8005f42:	4680      	mov	r8, r0
 8005f44:	429e      	cmp	r6, r3
 8005f46:	4689      	mov	r9, r1
 8005f48:	dc0e      	bgt.n	8005f68 <__kernel_cos+0xf0>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4650      	mov	r0, sl
 8005f50:	4659      	mov	r1, fp
 8005f52:	f7fa f901 	bl	8000158 <__aeabi_dsub>
 8005f56:	4602      	mov	r2, r0
 8005f58:	2000      	movs	r0, #0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4922      	ldr	r1, [pc, #136]	; (8005fe8 <__kernel_cos+0x170>)
 8005f5e:	f7fa f8fb 	bl	8000158 <__aeabi_dsub>
 8005f62:	b003      	add	sp, #12
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	2400      	movs	r4, #0
 8005f6a:	4b20      	ldr	r3, [pc, #128]	; (8005fec <__kernel_cos+0x174>)
 8005f6c:	4622      	mov	r2, r4
 8005f6e:	429e      	cmp	r6, r3
 8005f70:	bfcc      	ite	gt
 8005f72:	4d1f      	ldrgt	r5, [pc, #124]	; (8005ff0 <__kernel_cos+0x178>)
 8005f74:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005f78:	462b      	mov	r3, r5
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	491a      	ldr	r1, [pc, #104]	; (8005fe8 <__kernel_cos+0x170>)
 8005f7e:	f7fa f8eb 	bl	8000158 <__aeabi_dsub>
 8005f82:	4622      	mov	r2, r4
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	462b      	mov	r3, r5
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	f7fa f8e3 	bl	8000158 <__aeabi_dsub>
 8005f92:	4642      	mov	r2, r8
 8005f94:	464b      	mov	r3, r9
 8005f96:	f7fa f8df 	bl	8000158 <__aeabi_dsub>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	e7dc      	b.n	8005f5e <__kernel_cos+0xe6>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	4910      	ldr	r1, [pc, #64]	; (8005fe8 <__kernel_cos+0x170>)
 8005fa8:	e7db      	b.n	8005f62 <__kernel_cos+0xea>
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w
 8005fb0:	be8838d4 	.word	0xbe8838d4
 8005fb4:	bda8fae9 	.word	0xbda8fae9
 8005fb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005fbc:	3e21ee9e 	.word	0x3e21ee9e
 8005fc0:	809c52ad 	.word	0x809c52ad
 8005fc4:	3e927e4f 	.word	0x3e927e4f
 8005fc8:	19cb1590 	.word	0x19cb1590
 8005fcc:	3efa01a0 	.word	0x3efa01a0
 8005fd0:	16c15177 	.word	0x16c15177
 8005fd4:	3f56c16c 	.word	0x3f56c16c
 8005fd8:	5555554c 	.word	0x5555554c
 8005fdc:	3fa55555 	.word	0x3fa55555
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	3fd33332 	.word	0x3fd33332
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	3fe90000 	.word	0x3fe90000
 8005ff0:	3fd20000 	.word	0x3fd20000

08005ff4 <__kernel_rem_pio2>:
 8005ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	9106      	str	r1, [sp, #24]
 8006000:	4bb6      	ldr	r3, [pc, #728]	; (80062dc <__kernel_rem_pio2+0x2e8>)
 8006002:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006004:	f112 0f14 	cmn.w	r2, #20
 8006008:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800600c:	bfa8      	it	ge
 800600e:	1ed4      	subge	r4, r2, #3
 8006010:	9302      	str	r3, [sp, #8]
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	bfb8      	it	lt
 8006016:	2400      	movlt	r4, #0
 8006018:	f103 33ff 	add.w	r3, r3, #4294967295
 800601c:	9307      	str	r3, [sp, #28]
 800601e:	bfa4      	itt	ge
 8006020:	2318      	movge	r3, #24
 8006022:	fb94 f4f3 	sdivge	r4, r4, r3
 8006026:	f06f 0317 	mvn.w	r3, #23
 800602a:	fb04 3303 	mla	r3, r4, r3, r3
 800602e:	eb03 0b02 	add.w	fp, r3, r2
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	9b02      	ldr	r3, [sp, #8]
 8006036:	1aa7      	subs	r7, r4, r2
 8006038:	eb03 0802 	add.w	r8, r3, r2
 800603c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800603e:	2500      	movs	r5, #0
 8006040:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	9009      	str	r0, [sp, #36]	; 0x24
 800604a:	ae20      	add	r6, sp, #128	; 0x80
 800604c:	4545      	cmp	r5, r8
 800604e:	dd14      	ble.n	800607a <__kernel_rem_pio2+0x86>
 8006050:	f04f 0800 	mov.w	r8, #0
 8006054:	9a08      	ldr	r2, [sp, #32]
 8006056:	ab20      	add	r3, sp, #128	; 0x80
 8006058:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800605c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8006060:	9b02      	ldr	r3, [sp, #8]
 8006062:	4598      	cmp	r8, r3
 8006064:	dc35      	bgt.n	80060d2 <__kernel_rem_pio2+0xde>
 8006066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006068:	2200      	movs	r2, #0
 800606a:	f1a3 0908 	sub.w	r9, r3, #8
 800606e:	2300      	movs	r3, #0
 8006070:	462f      	mov	r7, r5
 8006072:	2600      	movs	r6, #0
 8006074:	e9cd 2300 	strd	r2, r3, [sp]
 8006078:	e01f      	b.n	80060ba <__kernel_rem_pio2+0xc6>
 800607a:	42ef      	cmn	r7, r5
 800607c:	d40b      	bmi.n	8006096 <__kernel_rem_pio2+0xa2>
 800607e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006082:	e9cd 2300 	strd	r2, r3, [sp]
 8006086:	f7fa f9b5 	bl	80003f4 <__aeabi_i2d>
 800608a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800608e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006092:	3501      	adds	r5, #1
 8006094:	e7da      	b.n	800604c <__kernel_rem_pio2+0x58>
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	e7f8      	b.n	800608e <__kernel_rem_pio2+0x9a>
 800609c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80060a4:	f7fa fa10 	bl	80004c8 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b0:	f7fa f854 	bl	800015c <__adddf3>
 80060b4:	e9cd 0100 	strd	r0, r1, [sp]
 80060b8:	3601      	adds	r6, #1
 80060ba:	9b07      	ldr	r3, [sp, #28]
 80060bc:	3f08      	subs	r7, #8
 80060be:	429e      	cmp	r6, r3
 80060c0:	ddec      	ble.n	800609c <__kernel_rem_pio2+0xa8>
 80060c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060c6:	f108 0801 	add.w	r8, r8, #1
 80060ca:	e8ea 2302 	strd	r2, r3, [sl], #8
 80060ce:	3508      	adds	r5, #8
 80060d0:	e7c6      	b.n	8006060 <__kernel_rem_pio2+0x6c>
 80060d2:	9b02      	ldr	r3, [sp, #8]
 80060d4:	aa0c      	add	r2, sp, #48	; 0x30
 80060d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060da:	930b      	str	r3, [sp, #44]	; 0x2c
 80060dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80060de:	9e02      	ldr	r6, [sp, #8]
 80060e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80060e4:	930a      	str	r3, [sp, #40]	; 0x28
 80060e6:	ab98      	add	r3, sp, #608	; 0x260
 80060e8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80060ec:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80060f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80060f2:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80060f6:	46d0      	mov	r8, sl
 80060f8:	46b1      	mov	r9, r6
 80060fa:	af0c      	add	r7, sp, #48	; 0x30
 80060fc:	9700      	str	r7, [sp, #0]
 80060fe:	f1b9 0f00 	cmp.w	r9, #0
 8006102:	f1a8 0808 	sub.w	r8, r8, #8
 8006106:	dc71      	bgt.n	80061ec <__kernel_rem_pio2+0x1f8>
 8006108:	465a      	mov	r2, fp
 800610a:	4620      	mov	r0, r4
 800610c:	4629      	mov	r1, r5
 800610e:	f000 fbf7 	bl	8006900 <scalbn>
 8006112:	2200      	movs	r2, #0
 8006114:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006118:	4604      	mov	r4, r0
 800611a:	460d      	mov	r5, r1
 800611c:	f7fa f9d4 	bl	80004c8 <__aeabi_dmul>
 8006120:	f000 fb66 	bl	80067f0 <floor>
 8006124:	2200      	movs	r2, #0
 8006126:	4b6e      	ldr	r3, [pc, #440]	; (80062e0 <__kernel_rem_pio2+0x2ec>)
 8006128:	f7fa f9ce 	bl	80004c8 <__aeabi_dmul>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fa f810 	bl	8000158 <__aeabi_dsub>
 8006138:	460d      	mov	r5, r1
 800613a:	4604      	mov	r4, r0
 800613c:	f7fa fc74 	bl	8000a28 <__aeabi_d2iz>
 8006140:	9004      	str	r0, [sp, #16]
 8006142:	f7fa f957 	bl	80003f4 <__aeabi_i2d>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4620      	mov	r0, r4
 800614c:	4629      	mov	r1, r5
 800614e:	f7fa f803 	bl	8000158 <__aeabi_dsub>
 8006152:	f1bb 0f00 	cmp.w	fp, #0
 8006156:	4680      	mov	r8, r0
 8006158:	4689      	mov	r9, r1
 800615a:	dd70      	ble.n	800623e <__kernel_rem_pio2+0x24a>
 800615c:	1e72      	subs	r2, r6, #1
 800615e:	ab0c      	add	r3, sp, #48	; 0x30
 8006160:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006164:	9c04      	ldr	r4, [sp, #16]
 8006166:	f1cb 0118 	rsb	r1, fp, #24
 800616a:	fa40 f301 	asr.w	r3, r0, r1
 800616e:	441c      	add	r4, r3
 8006170:	408b      	lsls	r3, r1
 8006172:	1ac0      	subs	r0, r0, r3
 8006174:	ab0c      	add	r3, sp, #48	; 0x30
 8006176:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800617a:	f1cb 0317 	rsb	r3, fp, #23
 800617e:	9404      	str	r4, [sp, #16]
 8006180:	fa40 f303 	asr.w	r3, r0, r3
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	dd66      	ble.n	800625a <__kernel_rem_pio2+0x266>
 800618c:	2200      	movs	r2, #0
 800618e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006192:	4614      	mov	r4, r2
 8006194:	9b04      	ldr	r3, [sp, #16]
 8006196:	3301      	adds	r3, #1
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	4296      	cmp	r6, r2
 800619c:	f300 80ac 	bgt.w	80062f8 <__kernel_rem_pio2+0x304>
 80061a0:	f1bb 0f00 	cmp.w	fp, #0
 80061a4:	dd07      	ble.n	80061b6 <__kernel_rem_pio2+0x1c2>
 80061a6:	f1bb 0f01 	cmp.w	fp, #1
 80061aa:	f000 80b4 	beq.w	8006316 <__kernel_rem_pio2+0x322>
 80061ae:	f1bb 0f02 	cmp.w	fp, #2
 80061b2:	f000 80ba 	beq.w	800632a <__kernel_rem_pio2+0x336>
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d14e      	bne.n	800625a <__kernel_rem_pio2+0x266>
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	2000      	movs	r0, #0
 80061c2:	4948      	ldr	r1, [pc, #288]	; (80062e4 <__kernel_rem_pio2+0x2f0>)
 80061c4:	f7f9 ffc8 	bl	8000158 <__aeabi_dsub>
 80061c8:	4680      	mov	r8, r0
 80061ca:	4689      	mov	r9, r1
 80061cc:	2c00      	cmp	r4, #0
 80061ce:	d044      	beq.n	800625a <__kernel_rem_pio2+0x266>
 80061d0:	465a      	mov	r2, fp
 80061d2:	2000      	movs	r0, #0
 80061d4:	4943      	ldr	r1, [pc, #268]	; (80062e4 <__kernel_rem_pio2+0x2f0>)
 80061d6:	f000 fb93 	bl	8006900 <scalbn>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7f9 ffb9 	bl	8000158 <__aeabi_dsub>
 80061e6:	4680      	mov	r8, r0
 80061e8:	4689      	mov	r9, r1
 80061ea:	e036      	b.n	800625a <__kernel_rem_pio2+0x266>
 80061ec:	2200      	movs	r2, #0
 80061ee:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <__kernel_rem_pio2+0x2f4>)
 80061f0:	4620      	mov	r0, r4
 80061f2:	4629      	mov	r1, r5
 80061f4:	f7fa f968 	bl	80004c8 <__aeabi_dmul>
 80061f8:	f7fa fc16 	bl	8000a28 <__aeabi_d2iz>
 80061fc:	f7fa f8fa 	bl	80003f4 <__aeabi_i2d>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006208:	2200      	movs	r2, #0
 800620a:	4b38      	ldr	r3, [pc, #224]	; (80062ec <__kernel_rem_pio2+0x2f8>)
 800620c:	f7fa f95c 	bl	80004c8 <__aeabi_dmul>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7f9 ff9e 	bl	8000158 <__aeabi_dsub>
 800621c:	f7fa fc04 	bl	8000a28 <__aeabi_d2iz>
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	f109 39ff 	add.w	r9, r9, #4294967295
 8006226:	f843 0b04 	str.w	r0, [r3], #4
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006230:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006234:	f7f9 ff92 	bl	800015c <__adddf3>
 8006238:	4604      	mov	r4, r0
 800623a:	460d      	mov	r5, r1
 800623c:	e75f      	b.n	80060fe <__kernel_rem_pio2+0x10a>
 800623e:	d105      	bne.n	800624c <__kernel_rem_pio2+0x258>
 8006240:	1e73      	subs	r3, r6, #1
 8006242:	aa0c      	add	r2, sp, #48	; 0x30
 8006244:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006248:	15c3      	asrs	r3, r0, #23
 800624a:	e79b      	b.n	8006184 <__kernel_rem_pio2+0x190>
 800624c:	2200      	movs	r2, #0
 800624e:	4b28      	ldr	r3, [pc, #160]	; (80062f0 <__kernel_rem_pio2+0x2fc>)
 8006250:	f7fa fbc0 	bl	80009d4 <__aeabi_dcmpge>
 8006254:	2800      	cmp	r0, #0
 8006256:	d13e      	bne.n	80062d6 <__kernel_rem_pio2+0x2e2>
 8006258:	9000      	str	r0, [sp, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	2300      	movs	r3, #0
 800625e:	4640      	mov	r0, r8
 8006260:	4649      	mov	r1, r9
 8006262:	f7fa fb99 	bl	8000998 <__aeabi_dcmpeq>
 8006266:	2800      	cmp	r0, #0
 8006268:	f000 80b1 	beq.w	80063ce <__kernel_rem_pio2+0x3da>
 800626c:	1e74      	subs	r4, r6, #1
 800626e:	4623      	mov	r3, r4
 8006270:	2200      	movs	r2, #0
 8006272:	9902      	ldr	r1, [sp, #8]
 8006274:	428b      	cmp	r3, r1
 8006276:	da5f      	bge.n	8006338 <__kernel_rem_pio2+0x344>
 8006278:	2a00      	cmp	r2, #0
 800627a:	d074      	beq.n	8006366 <__kernel_rem_pio2+0x372>
 800627c:	ab0c      	add	r3, sp, #48	; 0x30
 800627e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006282:	f1ab 0b18 	sub.w	fp, fp, #24
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 809f 	beq.w	80063ca <__kernel_rem_pio2+0x3d6>
 800628c:	465a      	mov	r2, fp
 800628e:	2000      	movs	r0, #0
 8006290:	4914      	ldr	r1, [pc, #80]	; (80062e4 <__kernel_rem_pio2+0x2f0>)
 8006292:	f000 fb35 	bl	8006900 <scalbn>
 8006296:	46a2      	mov	sl, r4
 8006298:	4606      	mov	r6, r0
 800629a:	460f      	mov	r7, r1
 800629c:	f04f 0800 	mov.w	r8, #0
 80062a0:	ab70      	add	r3, sp, #448	; 0x1c0
 80062a2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80062e8 <__kernel_rem_pio2+0x2f4>
 80062a6:	00e5      	lsls	r5, r4, #3
 80062a8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80062ac:	f1ba 0f00 	cmp.w	sl, #0
 80062b0:	f280 80c3 	bge.w	800643a <__kernel_rem_pio2+0x446>
 80062b4:	4626      	mov	r6, r4
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	f2c0 80f5 	blt.w	80064a6 <__kernel_rem_pio2+0x4b2>
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <__kernel_rem_pio2+0x300>)
 80062be:	f04f 0a00 	mov.w	sl, #0
 80062c2:	9307      	str	r3, [sp, #28]
 80062c4:	ab70      	add	r3, sp, #448	; 0x1c0
 80062c6:	f04f 0b00 	mov.w	fp, #0
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80062d2:	1ba7      	subs	r7, r4, r6
 80062d4:	e0db      	b.n	800648e <__kernel_rem_pio2+0x49a>
 80062d6:	2302      	movs	r3, #2
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	e757      	b.n	800618c <__kernel_rem_pio2+0x198>
 80062dc:	08006c10 	.word	0x08006c10
 80062e0:	40200000 	.word	0x40200000
 80062e4:	3ff00000 	.word	0x3ff00000
 80062e8:	3e700000 	.word	0x3e700000
 80062ec:	41700000 	.word	0x41700000
 80062f0:	3fe00000 	.word	0x3fe00000
 80062f4:	08006bd0 	.word	0x08006bd0
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	b944      	cbnz	r4, 800630e <__kernel_rem_pio2+0x31a>
 80062fc:	b11b      	cbz	r3, 8006306 <__kernel_rem_pio2+0x312>
 80062fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	2301      	movs	r3, #1
 8006306:	461c      	mov	r4, r3
 8006308:	3201      	adds	r2, #1
 800630a:	3704      	adds	r7, #4
 800630c:	e745      	b.n	800619a <__kernel_rem_pio2+0x1a6>
 800630e:	1acb      	subs	r3, r1, r3
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	4623      	mov	r3, r4
 8006314:	e7f7      	b.n	8006306 <__kernel_rem_pio2+0x312>
 8006316:	1e72      	subs	r2, r6, #1
 8006318:	ab0c      	add	r3, sp, #48	; 0x30
 800631a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800631e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006322:	a90c      	add	r1, sp, #48	; 0x30
 8006324:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006328:	e745      	b.n	80061b6 <__kernel_rem_pio2+0x1c2>
 800632a:	1e72      	subs	r2, r6, #1
 800632c:	ab0c      	add	r3, sp, #48	; 0x30
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006336:	e7f4      	b.n	8006322 <__kernel_rem_pio2+0x32e>
 8006338:	a90c      	add	r1, sp, #48	; 0x30
 800633a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800633e:	3b01      	subs	r3, #1
 8006340:	430a      	orrs	r2, r1
 8006342:	e796      	b.n	8006272 <__kernel_rem_pio2+0x27e>
 8006344:	3401      	adds	r4, #1
 8006346:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800634a:	2a00      	cmp	r2, #0
 800634c:	d0fa      	beq.n	8006344 <__kernel_rem_pio2+0x350>
 800634e:	9b08      	ldr	r3, [sp, #32]
 8006350:	f106 0801 	add.w	r8, r6, #1
 8006354:	18f5      	adds	r5, r6, r3
 8006356:	ab20      	add	r3, sp, #128	; 0x80
 8006358:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800635c:	4434      	add	r4, r6
 800635e:	4544      	cmp	r4, r8
 8006360:	da04      	bge.n	800636c <__kernel_rem_pio2+0x378>
 8006362:	4626      	mov	r6, r4
 8006364:	e6bf      	b.n	80060e6 <__kernel_rem_pio2+0xf2>
 8006366:	2401      	movs	r4, #1
 8006368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636a:	e7ec      	b.n	8006346 <__kernel_rem_pio2+0x352>
 800636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636e:	f04f 0900 	mov.w	r9, #0
 8006372:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006376:	f7fa f83d 	bl	80003f4 <__aeabi_i2d>
 800637a:	2600      	movs	r6, #0
 800637c:	2700      	movs	r7, #0
 800637e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006380:	e9c5 0100 	strd	r0, r1, [r5]
 8006384:	3b08      	subs	r3, #8
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	9504      	str	r5, [sp, #16]
 800638a:	9b07      	ldr	r3, [sp, #28]
 800638c:	4599      	cmp	r9, r3
 800638e:	dd05      	ble.n	800639c <__kernel_rem_pio2+0x3a8>
 8006390:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006394:	f108 0801 	add.w	r8, r8, #1
 8006398:	3508      	adds	r5, #8
 800639a:	e7e0      	b.n	800635e <__kernel_rem_pio2+0x36a>
 800639c:	f8dd c010 	ldr.w	ip, [sp, #16]
 80063a0:	9900      	ldr	r1, [sp, #0]
 80063a2:	f109 0901 	add.w	r9, r9, #1
 80063a6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80063aa:	9100      	str	r1, [sp, #0]
 80063ac:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80063b0:	f8cd c010 	str.w	ip, [sp, #16]
 80063b4:	f7fa f888 	bl	80004c8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7f9 fecc 	bl	800015c <__adddf3>
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	e7df      	b.n	800638a <__kernel_rem_pio2+0x396>
 80063ca:	3c01      	subs	r4, #1
 80063cc:	e756      	b.n	800627c <__kernel_rem_pio2+0x288>
 80063ce:	f1cb 0200 	rsb	r2, fp, #0
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f000 fa93 	bl	8006900 <scalbn>
 80063da:	2200      	movs	r2, #0
 80063dc:	4ba4      	ldr	r3, [pc, #656]	; (8006670 <__kernel_rem_pio2+0x67c>)
 80063de:	4604      	mov	r4, r0
 80063e0:	460d      	mov	r5, r1
 80063e2:	f7fa faf7 	bl	80009d4 <__aeabi_dcmpge>
 80063e6:	b1f8      	cbz	r0, 8006428 <__kernel_rem_pio2+0x434>
 80063e8:	2200      	movs	r2, #0
 80063ea:	4ba2      	ldr	r3, [pc, #648]	; (8006674 <__kernel_rem_pio2+0x680>)
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa f86a 	bl	80004c8 <__aeabi_dmul>
 80063f4:	f7fa fb18 	bl	8000a28 <__aeabi_d2iz>
 80063f8:	4607      	mov	r7, r0
 80063fa:	f7f9 fffb 	bl	80003f4 <__aeabi_i2d>
 80063fe:	2200      	movs	r2, #0
 8006400:	4b9b      	ldr	r3, [pc, #620]	; (8006670 <__kernel_rem_pio2+0x67c>)
 8006402:	f7fa f861 	bl	80004c8 <__aeabi_dmul>
 8006406:	460b      	mov	r3, r1
 8006408:	4602      	mov	r2, r0
 800640a:	4629      	mov	r1, r5
 800640c:	4620      	mov	r0, r4
 800640e:	f7f9 fea3 	bl	8000158 <__aeabi_dsub>
 8006412:	f7fa fb09 	bl	8000a28 <__aeabi_d2iz>
 8006416:	1c74      	adds	r4, r6, #1
 8006418:	ab0c      	add	r3, sp, #48	; 0x30
 800641a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800641e:	f10b 0b18 	add.w	fp, fp, #24
 8006422:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8006426:	e731      	b.n	800628c <__kernel_rem_pio2+0x298>
 8006428:	4620      	mov	r0, r4
 800642a:	4629      	mov	r1, r5
 800642c:	f7fa fafc 	bl	8000a28 <__aeabi_d2iz>
 8006430:	ab0c      	add	r3, sp, #48	; 0x30
 8006432:	4634      	mov	r4, r6
 8006434:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006438:	e728      	b.n	800628c <__kernel_rem_pio2+0x298>
 800643a:	ab0c      	add	r3, sp, #48	; 0x30
 800643c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006440:	f7f9 ffd8 	bl	80003f4 <__aeabi_i2d>
 8006444:	4632      	mov	r2, r6
 8006446:	463b      	mov	r3, r7
 8006448:	f7fa f83e 	bl	80004c8 <__aeabi_dmul>
 800644c:	4642      	mov	r2, r8
 800644e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006452:	464b      	mov	r3, r9
 8006454:	4630      	mov	r0, r6
 8006456:	4639      	mov	r1, r7
 8006458:	f7fa f836 	bl	80004c8 <__aeabi_dmul>
 800645c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006460:	4606      	mov	r6, r0
 8006462:	460f      	mov	r7, r1
 8006464:	e722      	b.n	80062ac <__kernel_rem_pio2+0x2b8>
 8006466:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800646a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800646e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006472:	f8cd c01c 	str.w	ip, [sp, #28]
 8006476:	f7fa f827 	bl	80004c8 <__aeabi_dmul>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4650      	mov	r0, sl
 8006480:	4659      	mov	r1, fp
 8006482:	f7f9 fe6b 	bl	800015c <__adddf3>
 8006486:	4682      	mov	sl, r0
 8006488:	468b      	mov	fp, r1
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	4598      	cmp	r8, r3
 8006492:	dc01      	bgt.n	8006498 <__kernel_rem_pio2+0x4a4>
 8006494:	45b8      	cmp	r8, r7
 8006496:	dde6      	ble.n	8006466 <__kernel_rem_pio2+0x472>
 8006498:	ab48      	add	r3, sp, #288	; 0x120
 800649a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800649e:	e9c7 ab00 	strd	sl, fp, [r7]
 80064a2:	3e01      	subs	r6, #1
 80064a4:	e707      	b.n	80062b6 <__kernel_rem_pio2+0x2c2>
 80064a6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	dc09      	bgt.n	80064c0 <__kernel_rem_pio2+0x4cc>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dc32      	bgt.n	8006516 <__kernel_rem_pio2+0x522>
 80064b0:	d05a      	beq.n	8006568 <__kernel_rem_pio2+0x574>
 80064b2:	9b04      	ldr	r3, [sp, #16]
 80064b4:	f003 0007 	and.w	r0, r3, #7
 80064b8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d1f5      	bne.n	80064b2 <__kernel_rem_pio2+0x4be>
 80064c6:	ab48      	add	r3, sp, #288	; 0x120
 80064c8:	441d      	add	r5, r3
 80064ca:	46aa      	mov	sl, r5
 80064cc:	46a3      	mov	fp, r4
 80064ce:	f1bb 0f00 	cmp.w	fp, #0
 80064d2:	dc76      	bgt.n	80065c2 <__kernel_rem_pio2+0x5ce>
 80064d4:	46aa      	mov	sl, r5
 80064d6:	46a3      	mov	fp, r4
 80064d8:	f1bb 0f01 	cmp.w	fp, #1
 80064dc:	f300 8090 	bgt.w	8006600 <__kernel_rem_pio2+0x60c>
 80064e0:	2700      	movs	r7, #0
 80064e2:	463e      	mov	r6, r7
 80064e4:	2c01      	cmp	r4, #1
 80064e6:	f300 80aa 	bgt.w	800663e <__kernel_rem_pio2+0x64a>
 80064ea:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80064ee:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80064f2:	9b00      	ldr	r3, [sp, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 80ac 	bne.w	8006652 <__kernel_rem_pio2+0x65e>
 80064fa:	4603      	mov	r3, r0
 80064fc:	462a      	mov	r2, r5
 80064fe:	9806      	ldr	r0, [sp, #24]
 8006500:	e9c0 2300 	strd	r2, r3, [r0]
 8006504:	4622      	mov	r2, r4
 8006506:	460b      	mov	r3, r1
 8006508:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800650c:	463a      	mov	r2, r7
 800650e:	4633      	mov	r3, r6
 8006510:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006514:	e7cd      	b.n	80064b2 <__kernel_rem_pio2+0x4be>
 8006516:	2000      	movs	r0, #0
 8006518:	46a0      	mov	r8, r4
 800651a:	4601      	mov	r1, r0
 800651c:	ab48      	add	r3, sp, #288	; 0x120
 800651e:	441d      	add	r5, r3
 8006520:	f1b8 0f00 	cmp.w	r8, #0
 8006524:	da3a      	bge.n	800659c <__kernel_rem_pio2+0x5a8>
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d03e      	beq.n	80065aa <__kernel_rem_pio2+0x5b6>
 800652c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006530:	4602      	mov	r2, r0
 8006532:	462b      	mov	r3, r5
 8006534:	9d06      	ldr	r5, [sp, #24]
 8006536:	2601      	movs	r6, #1
 8006538:	e9c5 2300 	strd	r2, r3, [r5]
 800653c:	460b      	mov	r3, r1
 800653e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006542:	f7f9 fe09 	bl	8000158 <__aeabi_dsub>
 8006546:	4684      	mov	ip, r0
 8006548:	460f      	mov	r7, r1
 800654a:	ad48      	add	r5, sp, #288	; 0x120
 800654c:	42b4      	cmp	r4, r6
 800654e:	f105 0508 	add.w	r5, r5, #8
 8006552:	da2c      	bge.n	80065ae <__kernel_rem_pio2+0x5ba>
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	b10b      	cbz	r3, 800655c <__kernel_rem_pio2+0x568>
 8006558:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800655c:	4662      	mov	r2, ip
 800655e:	463b      	mov	r3, r7
 8006560:	9906      	ldr	r1, [sp, #24]
 8006562:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006566:	e7a4      	b.n	80064b2 <__kernel_rem_pio2+0x4be>
 8006568:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800656a:	ab48      	add	r3, sp, #288	; 0x120
 800656c:	4637      	mov	r7, r6
 800656e:	441d      	add	r5, r3
 8006570:	2c00      	cmp	r4, #0
 8006572:	da09      	bge.n	8006588 <__kernel_rem_pio2+0x594>
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	b10b      	cbz	r3, 800657c <__kernel_rem_pio2+0x588>
 8006578:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	9906      	ldr	r1, [sp, #24]
 8006582:	e9c1 2300 	strd	r2, r3, [r1]
 8006586:	e794      	b.n	80064b2 <__kernel_rem_pio2+0x4be>
 8006588:	4630      	mov	r0, r6
 800658a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800658e:	4639      	mov	r1, r7
 8006590:	f7f9 fde4 	bl	800015c <__adddf3>
 8006594:	3c01      	subs	r4, #1
 8006596:	4606      	mov	r6, r0
 8006598:	460f      	mov	r7, r1
 800659a:	e7e9      	b.n	8006570 <__kernel_rem_pio2+0x57c>
 800659c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80065a0:	f7f9 fddc 	bl	800015c <__adddf3>
 80065a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80065a8:	e7ba      	b.n	8006520 <__kernel_rem_pio2+0x52c>
 80065aa:	460d      	mov	r5, r1
 80065ac:	e7c0      	b.n	8006530 <__kernel_rem_pio2+0x53c>
 80065ae:	4660      	mov	r0, ip
 80065b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7f9 fdd1 	bl	800015c <__adddf3>
 80065ba:	3601      	adds	r6, #1
 80065bc:	4684      	mov	ip, r0
 80065be:	460f      	mov	r7, r1
 80065c0:	e7c4      	b.n	800654c <__kernel_rem_pio2+0x558>
 80065c2:	e9da 6700 	ldrd	r6, r7, [sl]
 80065c6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80065ca:	4632      	mov	r2, r6
 80065cc:	463b      	mov	r3, r7
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7f9 fdc3 	bl	800015c <__adddf3>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065de:	4640      	mov	r0, r8
 80065e0:	4649      	mov	r1, r9
 80065e2:	f7f9 fdb9 	bl	8000158 <__aeabi_dsub>
 80065e6:	4632      	mov	r2, r6
 80065e8:	463b      	mov	r3, r7
 80065ea:	f7f9 fdb7 	bl	800015c <__adddf3>
 80065ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065f2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80065f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065fa:	e9ca 2300 	strd	r2, r3, [sl]
 80065fe:	e766      	b.n	80064ce <__kernel_rem_pio2+0x4da>
 8006600:	e9da 8900 	ldrd	r8, r9, [sl]
 8006604:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	4630      	mov	r0, r6
 800660e:	4639      	mov	r1, r7
 8006610:	f7f9 fda4 	bl	800015c <__adddf3>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7f9 fd9a 	bl	8000158 <__aeabi_dsub>
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	f7f9 fd98 	bl	800015c <__adddf3>
 800662c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006630:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006634:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006638:	e9ca 2300 	strd	r2, r3, [sl]
 800663c:	e74c      	b.n	80064d8 <__kernel_rem_pio2+0x4e4>
 800663e:	4638      	mov	r0, r7
 8006640:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006644:	4631      	mov	r1, r6
 8006646:	f7f9 fd89 	bl	800015c <__adddf3>
 800664a:	3c01      	subs	r4, #1
 800664c:	4607      	mov	r7, r0
 800664e:	460e      	mov	r6, r1
 8006650:	e748      	b.n	80064e4 <__kernel_rem_pio2+0x4f0>
 8006652:	9b06      	ldr	r3, [sp, #24]
 8006654:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006658:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800665c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006660:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006664:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006668:	601d      	str	r5, [r3, #0]
 800666a:	615e      	str	r6, [r3, #20]
 800666c:	e721      	b.n	80064b2 <__kernel_rem_pio2+0x4be>
 800666e:	bf00      	nop
 8006670:	41700000 	.word	0x41700000
 8006674:	3e700000 	.word	0x3e700000

08006678 <__kernel_sin>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	e9cd 2300 	strd	r2, r3, [sp]
 8006682:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006686:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800668a:	4682      	mov	sl, r0
 800668c:	460c      	mov	r4, r1
 800668e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006690:	da03      	bge.n	800669a <__kernel_sin+0x22>
 8006692:	f7fa f9c9 	bl	8000a28 <__aeabi_d2iz>
 8006696:	2800      	cmp	r0, #0
 8006698:	d050      	beq.n	800673c <__kernel_sin+0xc4>
 800669a:	4652      	mov	r2, sl
 800669c:	4623      	mov	r3, r4
 800669e:	4650      	mov	r0, sl
 80066a0:	4621      	mov	r1, r4
 80066a2:	f7f9 ff11 	bl	80004c8 <__aeabi_dmul>
 80066a6:	4606      	mov	r6, r0
 80066a8:	460f      	mov	r7, r1
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4650      	mov	r0, sl
 80066b0:	4621      	mov	r1, r4
 80066b2:	f7f9 ff09 	bl	80004c8 <__aeabi_dmul>
 80066b6:	a33e      	add	r3, pc, #248	; (adr r3, 80067b0 <__kernel_sin+0x138>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	4680      	mov	r8, r0
 80066be:	4689      	mov	r9, r1
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7f9 ff00 	bl	80004c8 <__aeabi_dmul>
 80066c8:	a33b      	add	r3, pc, #236	; (adr r3, 80067b8 <__kernel_sin+0x140>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	f7f9 fd43 	bl	8000158 <__aeabi_dsub>
 80066d2:	4632      	mov	r2, r6
 80066d4:	463b      	mov	r3, r7
 80066d6:	f7f9 fef7 	bl	80004c8 <__aeabi_dmul>
 80066da:	a339      	add	r3, pc, #228	; (adr r3, 80067c0 <__kernel_sin+0x148>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 fd3c 	bl	800015c <__adddf3>
 80066e4:	4632      	mov	r2, r6
 80066e6:	463b      	mov	r3, r7
 80066e8:	f7f9 feee 	bl	80004c8 <__aeabi_dmul>
 80066ec:	a336      	add	r3, pc, #216	; (adr r3, 80067c8 <__kernel_sin+0x150>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f7f9 fd31 	bl	8000158 <__aeabi_dsub>
 80066f6:	4632      	mov	r2, r6
 80066f8:	463b      	mov	r3, r7
 80066fa:	f7f9 fee5 	bl	80004c8 <__aeabi_dmul>
 80066fe:	a334      	add	r3, pc, #208	; (adr r3, 80067d0 <__kernel_sin+0x158>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f7f9 fd2a 	bl	800015c <__adddf3>
 8006708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670c:	b9dd      	cbnz	r5, 8006746 <__kernel_sin+0xce>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	4630      	mov	r0, r6
 8006714:	4639      	mov	r1, r7
 8006716:	f7f9 fed7 	bl	80004c8 <__aeabi_dmul>
 800671a:	a32f      	add	r3, pc, #188	; (adr r3, 80067d8 <__kernel_sin+0x160>)
 800671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006720:	f7f9 fd1a 	bl	8000158 <__aeabi_dsub>
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	f7f9 fece 	bl	80004c8 <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4650      	mov	r0, sl
 8006732:	4621      	mov	r1, r4
 8006734:	f7f9 fd12 	bl	800015c <__adddf3>
 8006738:	4682      	mov	sl, r0
 800673a:	460c      	mov	r4, r1
 800673c:	4650      	mov	r0, sl
 800673e:	4621      	mov	r1, r4
 8006740:	b006      	add	sp, #24
 8006742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006746:	2200      	movs	r2, #0
 8006748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800674c:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <__kernel_sin+0x168>)
 800674e:	f7f9 febb 	bl	80004c8 <__aeabi_dmul>
 8006752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006756:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 feb3 	bl	80004c8 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800676a:	f7f9 fcf5 	bl	8000158 <__aeabi_dsub>
 800676e:	4632      	mov	r2, r6
 8006770:	463b      	mov	r3, r7
 8006772:	f7f9 fea9 	bl	80004c8 <__aeabi_dmul>
 8006776:	e9dd 2300 	ldrd	r2, r3, [sp]
 800677a:	f7f9 fced 	bl	8000158 <__aeabi_dsub>
 800677e:	a316      	add	r3, pc, #88	; (adr r3, 80067d8 <__kernel_sin+0x160>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	4606      	mov	r6, r0
 8006786:	460f      	mov	r7, r1
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 fe9c 	bl	80004c8 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7f9 fce0 	bl	800015c <__adddf3>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4650      	mov	r0, sl
 80067a2:	4621      	mov	r1, r4
 80067a4:	f7f9 fcd8 	bl	8000158 <__aeabi_dsub>
 80067a8:	e7c6      	b.n	8006738 <__kernel_sin+0xc0>
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
 80067b0:	5acfd57c 	.word	0x5acfd57c
 80067b4:	3de5d93a 	.word	0x3de5d93a
 80067b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80067bc:	3e5ae5e6 	.word	0x3e5ae5e6
 80067c0:	57b1fe7d 	.word	0x57b1fe7d
 80067c4:	3ec71de3 	.word	0x3ec71de3
 80067c8:	19c161d5 	.word	0x19c161d5
 80067cc:	3f2a01a0 	.word	0x3f2a01a0
 80067d0:	1110f8a6 	.word	0x1110f8a6
 80067d4:	3f811111 	.word	0x3f811111
 80067d8:	55555549 	.word	0x55555549
 80067dc:	3fc55555 	.word	0x3fc55555
 80067e0:	3fe00000 	.word	0x3fe00000

080067e4 <fabs>:
 80067e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80067e8:	4770      	bx	lr
 80067ea:	0000      	movs	r0, r0
 80067ec:	0000      	movs	r0, r0
	...

080067f0 <floor>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80067f8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80067fc:	2e13      	cmp	r6, #19
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4607      	mov	r7, r0
 8006804:	460c      	mov	r4, r1
 8006806:	4605      	mov	r5, r0
 8006808:	dc33      	bgt.n	8006872 <floor+0x82>
 800680a:	2e00      	cmp	r6, #0
 800680c:	da14      	bge.n	8006838 <floor+0x48>
 800680e:	a334      	add	r3, pc, #208	; (adr r3, 80068e0 <floor+0xf0>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f7f9 fca2 	bl	800015c <__adddf3>
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	f7fa f8e4 	bl	80009e8 <__aeabi_dcmpgt>
 8006820:	b138      	cbz	r0, 8006832 <floor+0x42>
 8006822:	2c00      	cmp	r4, #0
 8006824:	da58      	bge.n	80068d8 <floor+0xe8>
 8006826:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800682a:	431d      	orrs	r5, r3
 800682c:	d001      	beq.n	8006832 <floor+0x42>
 800682e:	2500      	movs	r5, #0
 8006830:	4c2d      	ldr	r4, [pc, #180]	; (80068e8 <floor+0xf8>)
 8006832:	4623      	mov	r3, r4
 8006834:	462f      	mov	r7, r5
 8006836:	e025      	b.n	8006884 <floor+0x94>
 8006838:	4a2c      	ldr	r2, [pc, #176]	; (80068ec <floor+0xfc>)
 800683a:	fa42 f806 	asr.w	r8, r2, r6
 800683e:	ea01 0208 	and.w	r2, r1, r8
 8006842:	4302      	orrs	r2, r0
 8006844:	d01e      	beq.n	8006884 <floor+0x94>
 8006846:	a326      	add	r3, pc, #152	; (adr r3, 80068e0 <floor+0xf0>)
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	f7f9 fc86 	bl	800015c <__adddf3>
 8006850:	2200      	movs	r2, #0
 8006852:	2300      	movs	r3, #0
 8006854:	f7fa f8c8 	bl	80009e8 <__aeabi_dcmpgt>
 8006858:	2800      	cmp	r0, #0
 800685a:	d0ea      	beq.n	8006832 <floor+0x42>
 800685c:	2c00      	cmp	r4, #0
 800685e:	bfbe      	ittt	lt
 8006860:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006864:	fa43 f606 	asrlt.w	r6, r3, r6
 8006868:	19a4      	addlt	r4, r4, r6
 800686a:	2500      	movs	r5, #0
 800686c:	ea24 0408 	bic.w	r4, r4, r8
 8006870:	e7df      	b.n	8006832 <floor+0x42>
 8006872:	2e33      	cmp	r6, #51	; 0x33
 8006874:	dd0a      	ble.n	800688c <floor+0x9c>
 8006876:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800687a:	d103      	bne.n	8006884 <floor+0x94>
 800687c:	f7f9 fc6e 	bl	800015c <__adddf3>
 8006880:	4607      	mov	r7, r0
 8006882:	460b      	mov	r3, r1
 8006884:	4638      	mov	r0, r7
 8006886:	4619      	mov	r1, r3
 8006888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688c:	f04f 32ff 	mov.w	r2, #4294967295
 8006890:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006894:	fa22 f808 	lsr.w	r8, r2, r8
 8006898:	ea18 0f00 	tst.w	r8, r0
 800689c:	d0f2      	beq.n	8006884 <floor+0x94>
 800689e:	a310      	add	r3, pc, #64	; (adr r3, 80068e0 <floor+0xf0>)
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f7f9 fc5a 	bl	800015c <__adddf3>
 80068a8:	2200      	movs	r2, #0
 80068aa:	2300      	movs	r3, #0
 80068ac:	f7fa f89c 	bl	80009e8 <__aeabi_dcmpgt>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d0be      	beq.n	8006832 <floor+0x42>
 80068b4:	2c00      	cmp	r4, #0
 80068b6:	da02      	bge.n	80068be <floor+0xce>
 80068b8:	2e14      	cmp	r6, #20
 80068ba:	d103      	bne.n	80068c4 <floor+0xd4>
 80068bc:	3401      	adds	r4, #1
 80068be:	ea25 0508 	bic.w	r5, r5, r8
 80068c2:	e7b6      	b.n	8006832 <floor+0x42>
 80068c4:	2301      	movs	r3, #1
 80068c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80068ca:	fa03 f606 	lsl.w	r6, r3, r6
 80068ce:	4435      	add	r5, r6
 80068d0:	42bd      	cmp	r5, r7
 80068d2:	bf38      	it	cc
 80068d4:	18e4      	addcc	r4, r4, r3
 80068d6:	e7f2      	b.n	80068be <floor+0xce>
 80068d8:	2500      	movs	r5, #0
 80068da:	462c      	mov	r4, r5
 80068dc:	e7a9      	b.n	8006832 <floor+0x42>
 80068de:	bf00      	nop
 80068e0:	8800759c 	.word	0x8800759c
 80068e4:	7e37e43c 	.word	0x7e37e43c
 80068e8:	bff00000 	.word	0xbff00000
 80068ec:	000fffff 	.word	0x000fffff

080068f0 <nan>:
 80068f0:	2000      	movs	r0, #0
 80068f2:	4901      	ldr	r1, [pc, #4]	; (80068f8 <nan+0x8>)
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	7ff80000 	.word	0x7ff80000
 80068fc:	00000000 	.word	0x00000000

08006900 <scalbn>:
 8006900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006902:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006906:	4604      	mov	r4, r0
 8006908:	460d      	mov	r5, r1
 800690a:	4617      	mov	r7, r2
 800690c:	460b      	mov	r3, r1
 800690e:	b996      	cbnz	r6, 8006936 <scalbn+0x36>
 8006910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006914:	4303      	orrs	r3, r0
 8006916:	d039      	beq.n	800698c <scalbn+0x8c>
 8006918:	4b33      	ldr	r3, [pc, #204]	; (80069e8 <scalbn+0xe8>)
 800691a:	2200      	movs	r2, #0
 800691c:	f7f9 fdd4 	bl	80004c8 <__aeabi_dmul>
 8006920:	4b32      	ldr	r3, [pc, #200]	; (80069ec <scalbn+0xec>)
 8006922:	4604      	mov	r4, r0
 8006924:	429f      	cmp	r7, r3
 8006926:	460d      	mov	r5, r1
 8006928:	da0f      	bge.n	800694a <scalbn+0x4a>
 800692a:	a32b      	add	r3, pc, #172	; (adr r3, 80069d8 <scalbn+0xd8>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fdca 	bl	80004c8 <__aeabi_dmul>
 8006934:	e006      	b.n	8006944 <scalbn+0x44>
 8006936:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800693a:	4296      	cmp	r6, r2
 800693c:	d10a      	bne.n	8006954 <scalbn+0x54>
 800693e:	4602      	mov	r2, r0
 8006940:	f7f9 fc0c 	bl	800015c <__adddf3>
 8006944:	4604      	mov	r4, r0
 8006946:	460d      	mov	r5, r1
 8006948:	e020      	b.n	800698c <scalbn+0x8c>
 800694a:	460b      	mov	r3, r1
 800694c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006950:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006954:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006958:	19b9      	adds	r1, r7, r6
 800695a:	4291      	cmp	r1, r2
 800695c:	dd0e      	ble.n	800697c <scalbn+0x7c>
 800695e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006962:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006966:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800696a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800696e:	4820      	ldr	r0, [pc, #128]	; (80069f0 <scalbn+0xf0>)
 8006970:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006974:	a31a      	add	r3, pc, #104	; (adr r3, 80069e0 <scalbn+0xe0>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	e7d9      	b.n	8006930 <scalbn+0x30>
 800697c:	2900      	cmp	r1, #0
 800697e:	dd08      	ble.n	8006992 <scalbn+0x92>
 8006980:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006988:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006992:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006996:	da12      	bge.n	80069be <scalbn+0xbe>
 8006998:	f24c 3350 	movw	r3, #50000	; 0xc350
 800699c:	429f      	cmp	r7, r3
 800699e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80069a2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80069a6:	dcdc      	bgt.n	8006962 <scalbn+0x62>
 80069a8:	a30b      	add	r3, pc, #44	; (adr r3, 80069d8 <scalbn+0xd8>)
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80069b2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80069b6:	480f      	ldr	r0, [pc, #60]	; (80069f4 <scalbn+0xf4>)
 80069b8:	f041 011f 	orr.w	r1, r1, #31
 80069bc:	e7b8      	b.n	8006930 <scalbn+0x30>
 80069be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069c2:	3136      	adds	r1, #54	; 0x36
 80069c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	2200      	movs	r2, #0
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <scalbn+0xf8>)
 80069d4:	e7ac      	b.n	8006930 <scalbn+0x30>
 80069d6:	bf00      	nop
 80069d8:	c2f8f359 	.word	0xc2f8f359
 80069dc:	01a56e1f 	.word	0x01a56e1f
 80069e0:	8800759c 	.word	0x8800759c
 80069e4:	7e37e43c 	.word	0x7e37e43c
 80069e8:	43500000 	.word	0x43500000
 80069ec:	ffff3cb0 	.word	0xffff3cb0
 80069f0:	8800759c 	.word	0x8800759c
 80069f4:	c2f8f359 	.word	0xc2f8f359
 80069f8:	3c900000 	.word	0x3c900000

080069fc <_init>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	bf00      	nop
 8006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a02:	bc08      	pop	{r3}
 8006a04:	469e      	mov	lr, r3
 8006a06:	4770      	bx	lr

08006a08 <_fini>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr
